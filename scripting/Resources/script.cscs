appName = "Larissa Math App";
VERSION = "1.0";
bgcolor = "#1f9dd4";
fgcolor = "white";
SetBackgroundColor(bgcolor);

running = false;
count = 0;
correct = 0;
maxNumber = 25;
squaresOnly = 16;
stopwatch = 0;
data = { {}, {}, {}, {} };
answers = { {}, {}, {} };

currIndex = 0;
rightAnswer = 0;
quizEntry = "";

fontSize = 26;
fontSizeSm = 20;
scale = 0.90;

total      = GetSetting("total", "int", 20);
level      = GetSetting("level", "int", 0);
keyBest    = "";
keyTime    = "";
keyDate    = "";

bestResult = 0.0;
bestTime   = "";
bestDate   = "";

explanation[0] = "Find the result of the expression";
explanation[1] = explanation[0];
explanation[2] = "Find value of x";
explanation[3] = "Write number with next digits (349810 -> 450921)";

AutoScale(scale);
printConsole(now("mm:ss.fff") + " Loading data...");

totalCount[3] = 1000000;

for (i = 2; i <= 10; i++) {
  for (j = i; j <= 10; j++) {
    if (j - i > 5 ) {
      data[0].Add(i + " + " + j);
      answers[0].Add(i + j);
      data[0].Add(j + " - " + i);
      answers[0].Add(j - i);
    }
    data[0].Add(i + " * " + j);
    answers[0].Add(i * j);
    if (i == 2 || i == 3 || i == 5) {
      data[0].Add(i * j + " : " + i);
      answers[0].Add(j);
    }
  }
}
totalCount[0] = data[0].size;
printConsole(now("mm:ss.fff") + " Loaded " + totalCount[0] + " level1: " + data[0][0] + " --> " + answers[0][0]);

for (i = 11; i < maxNumber; i++) {
  for (j = 3; j <= maxNumber; j++) {
    data[1].Add(i + " * " + j);
    answers[1].Add(i * j);

    data[1].Add(i * j + " / " + j);
    answers[1].Add(i);

    if (j - i > 10 && i % 5 != 0 ) {
      data[1].Add(i + " + " + j);
      answers[1].Add(i + j);

      data[1].Add(j + " - " + i);
      answers[1].Add(j - i);
    }
  }
}
totalCount[1] = data[1].size;
printConsole(now("mm:ss.fff") + " Loaded " + totalCount[1] + " level2: " + data[1][0] + " --> " + answers[1][0]);

for (a = -9; a <= 6; a++) {
  if (a == 0 || a == 1 || a == 2 || a == 4) {
    continue;
  }
  for (b = -7; b <= 7; b++) {
    if (b == 0 || b == 1 || b == 2) {
      continue;
    }
    for (x = 2; x <= 9; x++) {
      c = a * x + b;
      if (c == 1) {
        continue;
      }
      term1 = a == -1 ? "-" : a;
      sign  = b < 0 ? "" : "+";
      data[2].Add(term1 + "x " + sign + b + " = " + c);
      answers[2].Add((c - b)/a);
    }
  }
}
/*data0 = answers0 = {};
for (i = 2; i <= 10; i++) {
  for (j = i; j <= 10; j++) {
    data0.Add(i + " + " + j);
    answers0.Add(i + j);

    data0.Add(i + " * " + j);
    answers0.Add(i * j);

    if (j - i > 2 ) {
      data0.Add(j + " - " + i);
      answers0.Add(j - i);
    }

    if (i == 2) {
      data0.Add(i * j + " : " + i);
      answers0.Add(j);
    }
  }
}
data[0] = data0;
answers[0] = answers0;
totalCount[0] = data[0].size;
printConsole(now("mm:ss.fff") + " Loaded " + totalCount[0] + " level1: " + data[0][0] +
   " --> " + answers[0][0] + ", answers: " +  answers[0].size);

data1 = answers1 = {};
for (i = 2; i < maxNumber; i++) {
  for (j = i; j <= maxNumber; j++) {
    if (i > 10 && i % 10 != 0 && j % 10 != 0) {
      data1.Add(i + " + " + j);
      answers1.Add(i + j);
    }
    if (i > 10) {
      data1.Add(i + " * " + j);
      answers1.Add(i * j);

      data1.Add(i * j + " / " + j);
      answers1.Add(i);
    }
    if (j > 2) {
      data1.Add(i * j + " / " + j);
      answers1.Add(i);
    }
    if (j - i > 10 && i > 10 && i % 5 != 0 ) {
      data1.Add(j + " - " + i);
      answers1.Add(j - i);
    }
  }
}
data[1] = data1;
answers[1] = answers1;
totalCount[1] = data[1].size;
printConsole(now("mm:ss.fff") + " Loaded " + totalCount[1] + " level2: " + data[1][0] +
   " --> " + answers[1][0] + ", answers: " +  answers[1].size);

data2 = answers2 = {};
for (a = -9; a <= 6; a++) {
  if (a == 0 || a == 1 || a == 2 || a == 4) {
    continue;
  }
  for (b = -7; b <= 8; b++) {
    if (b == 0 || b == 1 || b == 2) {
      continue;
    }
    for (x = 2; x <= 9; x++) {
      c = a * x + b;
      if (c == 1) {
        continue;
      }
      term1 = a == -1 ? "-" : a;
      sign  = b < 0 ? "" : "+";
      data2.Add(term1 + "x " + sign + b + " = " + c);
      answers2.Add((c - b)/a);
    }
  }
}
data[2] = data2;
answers[2] = answers2;*/
totalCount[2] = data[2].size;
printConsole(now("mm:ss.fff") + " Loaded " + totalCount[2] + " level3: " + data[2][0] +
   " --> " + answers[2][0] + ", answers: " +  answers[2].size);

locResult = GetLocation("ROOT", "CENTER", "ROOT", "CENTER", 0, -150);
AddImageView(locResult, "resultView", "", 300, 200);
HideView(resultView);

locQuizLab = GetLocation("ROOT", "LEFT", "ROOT", "CENTER", 10, 150);
AddLabel(locQuizLab, "quizLab", "", 280, 100);
SetFontSize(quizLab, fontSize);
SetFontColor(quizLab, fgcolor);
AlignText(quizLab, "center");

locQuizLab2 = GetLocation(quizLab, "RIGHT", quizLab, "CENTER");
AddLabel(locQuizLab2, "quizLab2", "", 50, 100);
SetFontSize(quizLab2, fontSize);
SetFontColor(quizLab2, fgcolor);

locTextAnswer = GetLocation(quizLab2, "RIGHT", quizLab, "CENTER", 10);
AddTextEdit(locTextAnswer, "textAnswer", "", 180, 100);
SetFontSize(textAnswer, fontSize - 4);
NumKeyboard(textAnswer);
SetFontColor(textAnswer, fgcolor);

locButtonAnswer = GetLocation(textAnswer, "RIGHT", textAnswer, "CENTER", 20);
AddButton(locButtonAnswer, "buttonAnswer", "", 100, 100);
SetImage(buttonAnswer, "go");
AddBorder(buttonAnswer, 0);

locExplLab = GetLocation("ROOT", "CENTER", quizLab2, "TOP", 0, 0);
AddLabel(locExplLab, "explLab", "", 580, 50);
SetFontSize(explLab, fontSizesm - 8);
SetFontColor(explLab, fgcolor);
AlignText(explLab, "center");

locAnswerLab = GetLocation("ROOT", "CENTER", quizLab2, "BOTTOM", 0, 20);
AddLabel(locAnswerLab, "answerLab", "", 500, 60);
AlignText(answerLab, "center");
SetFontSize(answerLab, fontSizeSm - 2);

locBestLab = GetLocation("ROOT", "CENTER", answerLab, "BOTTOM", 0, 30);
AddLabel(locBestLab, "bestLab", "", 320, 30);
SetFontSize(bestLab, fontSizeSm - 6);
AlignText(bestLab, "center");
SetFontColor(bestLab, fgcolor);

locDateLab = GetLocation("ROOT", "CENTER", bestLab, "BOTTOM", 0, 0);
AddLabel(locDateLab, "dateLab", "", 320, 30);
SetFontSize(dateLab, fontSizeSm - 6);
AlignText(dateLab, "center");
SetFontColor(dateLab, fgcolor);


locCorrectLab = GetLocation("ROOT", "CENTER", "ROOT", "TOP", -160, 20);
AddLabel(locCorrectLab, "correctLab", "", 180, 60);
SetFontSize(correctLab, fontSizeSm - 2);
SetFontColor(correctLab, "dark_green");

locWrongLab = GetLocation(correctLab, "RIGHT", correctLab, "CENTER");
AddLabel(locWrongLab, "wrongLab", "", 180, 60);
SetFontSize(wrongLab, fontSizeSm - 2);
SetFontColor(wrongLab, "red");

locTimeLab = GetLocation("ROOT", "ALIGN_RIGHT", correctLab, "CENTER", 0);
AddLabel(locTimeLab, "timeLab", "", 160, 60);
SetFontSize(timeLab, fontSizeSm - 2);

locButtonNew = GetLocation("ROOT", "CENTER", wrongLab, "BOTTOM", 0, 10);
AddButton(locButtonNew, "buttonNew", "", 200, 200);
AddBorder(buttonNew, 0);
SetImage(buttonNew, "start");


locWordsLab = GetLocation("ROOT", "LEFT", "ROOT", "BOTTOM", 20, -80);
AddLabel(locWordsLab, "wordsLab", "Entries: ", 100, 30);
SetFontSize(wordsLab, fontSizeSm - 6);
SetFontColor(wordsLab, fgcolor);

locWordsStepper = GetLocation(wordsLab, "RIGHT", wordsLab, "CENTER", 10, 0);
AddSfStepper(locWordsStepper, "wordsStepper", "30:5:100:5", 260, 60);
SetValue(wordsStepper, total);
SetFontSize(wordsStepper, fontSizeSm - 6);
AddAction(wordsStepper, "updateTotalEntries");
SetFontColor(wordsStepper, fgcolor);

locQuizLevelLab = GetLocation("ROOT", "LEFT", wordsStepper, "TOP", 20, -10);
AddLabel(locQuizLevelLab, "quizLevelLab", "Level:", 100, 80);
SetFontSize(quizLevelLab, fontSizeSm - 6);
SetFontColor(quizLevelLab, fgcolor);

locQuizLevel = GetLocation(quizLevelLab, "RIGHT", quizLevelLab, "CENTER", 10, 0);
AddSegmentedControl(locQuizLevel, "segQuizLevel", "Easy:Medium:Advanced:Memory", 520, 60);
SetValue(segQuizLevel, level);
SetFontSize(segQuizLevel, fontSizeSm - 6);
AddAction(segQuizLevel, "updateLevel");
SetFontColor(segQuizLevel, fgcolor);

locAboutUs = GetLocation("ROOT", "RIGHT", "ROOT", "BOTTOM", 0, -12);
AddButton(locAboutUs, "buttonAboutUs", "", 120, 120);
SetImage(buttonAboutUs, "about");
AddBorder(buttonAboutUs, 0);

function setBest() {
  if (bestResult > 0) {
    SetText(bestLab, "Best: " + bestResult + "%. Time: " + bestTime + ".");
    SetText(dateLab, bestDate);
  } else {
    SetText(bestLab, "");
    SetText(dateLab, "");
  }
}

function updateLevel(sender, arg) {
  printConsole("New Level=" + arg);
  level = int(arg);
  SetSetting("level", level, "int");
  updateTotalEntries(sender, total);
}

function updateTotalEntries(sender, arg) {
  total      = int(arg);
  keyBest    = "best_" + total + "_" + level;
  keyTime    = "time_" + total + "_" + level;
  keyDate    = "date_" + total + "_" + level;

  bestResult = GetSetting(keyBest, "double", 0.0);
  bestTime   = GetSetting(keyTime, "string", "00:00");
  bestDate   = GetSetting(keyDate, "string", "");
  SetSetting("total", total, "int");
  setBest();
}

function prepareNext() {
  rand = GetRandom(totalCount[level]);
  PrintConsole("prepareNext, level=", level, ", nb answers:" + answers.size, ", rand=", rand);
  if (level == 3) {
    tmp = rand;
    quizEntry = rand;
    currIndex = 0;
    rightAnswer = "";
    while(tmp > 0) {
      rem = tmp % 10;
      next = rem == 9 ? 0 : (rem + 1);
      rightAnswer = next + rightAnswer;
      tmp = int(tmp/10); 
    }
    PrintConsole("totalCount[level]/10=", totalCount[level]/10, ", res:" +(rand < totalCount[level]/10), ", rand=", rand);
    if (rand < totalCount[level]/10) {
      quizEntry   = "0" + quizEntry;
      rightAnswer = "1" + rightAnswer;
    }
    Schedule(3000, "memory_timer");
  } else {
    currIndex   = rand;
    PrintConsole("level=" + level + ", currIndex=" + currIndex + ", nb answers:" + answers[2].size);
    quizEntry   = data[level][currIndex];
    rightAnswer = answers[level][currIndex];
  }

  printConsole("rightAnswer=" + rightAnswer + ", quizEntry=" + quizEntry + ", currIndex=" + currIndex);
  ShowView(quizLab);
  SetText(quizLab, quizEntry);
  SetText(textAnswer, "");
  EnableWidget(buttonAnswer, true);

  ShowHideKeyboard(textAnswer, true);
  count++;
  PrintConsole("prepareNext2, nb answers:" + answers.size);
}

function buttonNew_click(sender, arg) {
  if (running) {
    stopQuiz();
    return;
  }
  count = 0;
  correct = 0;

  newText = level < 2 ? "=" : "";//(level == 2 ? "x=" : "");
  SetText(quizLab2, newText);
  SetText(answerLab, "");
  SetText(correctLab, "");
  SetText(wrongLab, "");
  SetText(explLab, explanation[level]);
  SetText(timeLab, "00:00");

  ShowView(buttonAnswer);
  ShowView(textAnswer);
  ShowView(quizLab);
  ShowView(quizLab2);
  ShowView(correctLab);
  ShowView(answerLab);
  ShowView(explLab);
  SetImage(buttonNew, "stop");

  running = true;
  prepareNext();
  stopwatch = StartStopWatch();
  Schedule(1000, "quiz_timer", "", "quiz_timeoutId", 1);

  printConsole("Started new quiz with number of entries: " + total);
}

function quiz_timer(sender, arg) {
  elapsed = StopWatchElapsed("mm:ss");
  SetText(timeLab, elapsed);
}

function memory_timer(sender, arg) {
  HideView(quizLab);
}

function delayedNext(sender, arg) {
  if (!checkQuizCompleted()) {
    prepareNext();
  }
  HideView(resultView);
}

function stopQuiz() {
  running = false;
  SetImage(buttonNew, "start");

  HideView(quizLab);
  HideView(quizLab2);
  HideView(textAnswer);
  HideView(buttonAnswer);
  HideView(correctLab);
  HideView(answerLab);
  HideView(explLab);

  CancelSchedule("quiz_timeoutId");
  stopwatch = StopStopWatch();

  ShowHideKeyboard(textAnswer, false);
}

function checkQuizCompleted() {
  printConsole("checkQuizCompleted total=[" + total + "], count=[" + count + "]");
  if (count < total) {
    return false;
  }

  stopQuiz();
  printConsole("checkQuizCompleted done. count < total = " + (count < total));

  percent = Round(double(correct)/double(total) * 100, 2);
  if (percent == 100) {
    extra = ". Excellent!";
  } elif (percent >= 90)  {
    extra = ". Very Good!";
  } elif (percent >= 80)  {
    extra = ". Good!";
  } else  {
    extra = ". Please excercise more!";
  }

  currentTime = GetText(timeLab);
  if (percent > bestResult || (percent == bestResult && currentTime < bestTime)) {
    bestResult = percent;
    bestTime = currentTime;
    bestDate = Now("yyyy/MM/dd HH:mm:ss");
    SetSetting(keyBest, bestResult);
    SetSetting(keyTime, bestTime);
    SetSetting(keyDate, bestDate);
    setBest();
  }
 
  msg = "Quiz completed! Correct: " + percent + "%" + extra;
  AlertDialog(appName, msg);

  return true;
}

function buttonAnswer_click(sender, arg) {
  ShowHideKeyboard(textAnswer, false);
  answer = getText(textAnswer);
  wasCorrect = (answer == rightAnswer);
  correct += wasCorrect;
  wrong = count - correct;

  textColor = wasCorrect ? "dark_green" : "red";
  msg = wasCorrect ? "Correct! " : "Wrong! ";
  SetFontColor(answerLab, textColor);

  sep = level < 2 ? " = " : (level == 2 ? "   x = " : " --> ");
  msg += quizEntry + sep + rightAnswer;

  SetText(answerLab, msg);
  SetText(correctLab, "Correct: " + correct);
  SetText(wrongLab, "Wrong: " + wrong);

  delay = wasCorrect ? 1000 : 3000;

  SetImage(resultView, wasCorrect ? "correct.png" : "wrong.png");
  ShowView(resultView);
  EnableWidget(buttonAnswer, false);

  Schedule(delay, "delayedNext");
}

function buttonAboutUs_click(sender, arg) {
  deviceInfo    = _DEVICE_INFO_;
  deviceVersion = _VERSION_INFO_;
  AlertDialog("LarissaMath", " \n Version " + VERSION + " \n" +
               deviceInfo + ": " + deviceVersion + " \n" +
              "Developed by Vassili Kaplan");
}

setBest();
updateTotalEntries("", total);
stopQuiz();
