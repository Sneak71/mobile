SetBackgroundColor("snow");
locView = GetLocation("ROOT", "CENTER", "ROOT", "TOP", 0, 0);
AddTextView(locView, "textView", "", DisplayWidth - Relative(40), DisplayHeight - Relative(200), 0);

function test(x, expected) {
  if (x == expected) {
    AddText(textView, string(x) + " as expected. OK", "green");
    return;
  } 
  if (type(expected) != "NUMBER") {
    AddText(textView, "[" + x + "] but expected [" + expected + "]. ERROR", "red");
    return;
  }

  epsilon = 0.000001;
  if ((expected == 0 && abs(x) <= epsilon) ||
       abs((x - expected) / expected) <= epsilon) {
    AddText(textView, "[" + x + "] within epsilon to [" + expected + "]. almost OK", "gray");
    //WriteConsole("x=", x, ", epsilon=", epsilon, ", abs((x - expected) / expected)=", abs((x - expected) / expected));
  } else {
    diff = expected - x;
    AddText(textView, "[" + x + "] but expected [" + expected + "]. diff=" + diff + ". ERROR", "red");
  }
}

function isInteger(candidate) {
  return candidate == round(candidate);
}

function factorial(n) {
  if (!isInteger(n) || n < 0) {
    exc = "Factorial is for nonnegative integers only (n="+ n +")";
    throw (exc);
  }
  if (n <= 1) {
    return 1;
  }

  return n * factorial(n - 1);
}

// Catalan numbers function implemented in CSCS.
// C(0) = 1, C(n + 1) = Sum(C(i) * C(n - i)), i: 0 --> n, for n >= 0
// Equivalent to: C(n) = 2 * (2*n - 1) / (n + 1) * C(n - 1), n > 0
function catalan(n) {
  if (!isInteger(n)) {
    exc = "Catalan is for integers only (n="+ n +")";
    throw (exc);
  }
  if (n < 0) {
    exc = "Negative number (n="+ n +") supplied";
    throw (exc);
  }
  if (n <= 1) {
    return 1;
  }

  return 2 * (2*n - 1) / (n + 1) * catalan(n - 1);
}

primes = {};
function isPrime(n) {
  if (size(primes) > n) {
    return primes[n];
  }
  if (n == 0 || n == 1) {
    primes[n] = 0;
    return 0;
  }

  bound = round(sqrt(n));
  sz = size(primes);
  if (sz <= bound) {
    AddText(textView, "calling isPrime(", bound, "),n=" + n);
    a=isPrime(bound);
    AddText(textView, "called isPrime(", bound, "),a=" + a);
  }
  i = 2;
  primes[n] = 1;
  while (i <= bound) {
    if (n % i == 0) {
      primes[n] = 0;
      return 0;
    }
    i++;
  }
  return primes[n];
}

function getPrimes(n) {
  bound = n;//round(sqrt(n));
  i = 0;
  while (++i < bound) {
    if (isPrime(i)) {
      AddText(textView, i);
    }
  }
}

cache["fib"] = 0;

function fibonacci(n) {
  if (contains(cache["fib"], n)) {
    result = cache["fib"][n];    
    return result;
  }
  if (!isInteger(n) || n < 0) {
    exc = "Fibonacci is for nonnegative integers only (n="+ n +")";
    throw (exc);
  }
  if (n <= 1) {
    return n;
  }

  result = fibonacci(n - 2) + fibonacci(n - 1);
  cache["fib"][n] = result;
  return result;
}

function tan(x) {
  return sin(x) / cos(x);
}

function cot(x) {
  return cos(x) / sin(x);
}

start = pstime;

AddText(textView, "Testing strings...");
txt = "lu";
txt += txt;
txt = txt + "_";
txt += "la";
txt += 1;
test(txt, "lulu_la1");

txt = "lu";
txt += txt + substr(txt, 0, 1) + "_" + 1;
test(txt, "lulul_1");  

bb = "abc_blah";
c = substr(bb, 4, 3);
test(c, "bla");
ind = indexof(bb, "bla");
test(ind, 4);

AddText(textView, "Testing numbers...");
a=(-3+2*9)-(10-15);
a++; --a;
AddText(textView, "a=[" + a + "]");
test(a, 20);

x = 1;
b = x++ - x--; // b = -1, x = 1
test(x, 1);
test(b, -1);
c = x = (b += 1); // x = b = c = 0,
test(x, 0);
test(b, 0);
test(c, 0);
x -= ++c; // c = 1, x = -1
test(x, -1);
test(c, 1);

test(2-11-3*7, -30);
test((((-5.5))), -5.5);
test(((16-3)-3)+15/2*5, 47.5);
test(1-2-3-(4-(5-(6-7)))-pow(2,3*exp(14-7*2)), -10);
test(3*50-3*pow(2,4)*3, 6);
test(++a-a--, 0);
test((a++)-(--a), 0);
test(a, 20);
test(1-a--, -19);
test((a++)-(--a)-a--, -19);
test(a, 18);
test(sin(pi/2), 1);
test(cos(pi/2), 0);
test(tan(pi/2), 1.63317787283838E+16);

a = 19;
test((a++)-(--a)-a--, a - 2 * a - 1);
test((a++)-(--a)-a--, a - 2 * a - 1);

x = 2.0E+15 + 3e+15 - 1.0e15;
test(x, 4e+15);

AddText(textView, "");

n = 10;
getPrimes(n);
test(isPrime(5), 1);
test(isPrime(6), 0);
function isInteger(candidate) {
  return candidate == round(candidate);
}

n="blah";
if (!isInteger(n) || n < 0) {
  test(n, n);
} else {
  test("integer", n);
}

c = 0; b = 2;
c+=3;
test(c, 3);
b*=5;
test(b/=2, 5);

write("Testing factorial(5): ");
test(factorial(5), 120);


x = sin(pi/2);
if (x < 0 && log(x + 3*10^2) < 6*exp(x) ||
             x < 1 - pi) {
  AddText(textView, "Error, in if, x=" + x);
} else {
  AddText(textView, "OK, in else, x=" + x);
}

a=1;
c=0;
test(a||c, 1);
test(c&&b, 0);

a[1]=1;
a[2]=2;
c=a[1]+a[2];
test(c, 3);

a[1][2]=22;
a[5][3]=15;
a[1][2]-=100;
a[5][3]+=100;

test(a[1][2], -78);
test(a[5][3], 115);

AddText(textView, a[5][2]);

i=13;
i++;
AddText(textView, i);
a[1][2]++;
AddText(textView, a[1][2]);
AddText(textView, a[5][3]++);
AddText(textView, a[5][3]++);
AddText(textView, a[5][3]++);
test(a[5][3], 118);

AddText(textView, ++a[5][3]);
AddText(textView, ++a[5][3]);
AddText(textView, ++a[5][3]);
AddText(textView, a[5][3]++);
test(a[5][3], 122);

AddText(textView, --a[5][3]);
AddText(textView, --a[5][3]);
AddText(textView, --a[5][3]);
AddText(textView, a[5][3]--);
AddText(textView, a[5][3]--);
AddText(textView, a[5][3]--);
test(a[5][3], 116);

i=10;

while(--i > 0) {
  newarray[i] = 2*i;
}
AddText(textView, "size(newarray)=" + size(newarray));
test(i, 0);
test(newarray[9], 18);
test(size(newarray), 10);

AddText(textView, "Testing short circuit evaluation");
function f(x) {
  counter++;
  return x;
}
counter = 0; test(f(0) && f(1), 0); test(counter, 1);
counter = 0; test(f(1) && f(0), 0); test(counter, 2);
counter = 0; test(f(1) || f(2), 1); test(counter, 1);
counter = 0; test(f(0) || f(3), 1); test(counter, 2);

a = (f(1) && ((sin(0) || sin(1*2)) && f(2) && (f(3) || f(4))));
test(a, 1);

AddText(textView, "Testing arrays and maps");
arr[2] = 10; arr[1] = "str";
test(type(arr),    "ARRAY");
test(type(arr[0]), "NONE");
test(type(arr[1]), "STRING");
test(type(arr[2]), "NUMBER");

x["bla"]["blu"]=113;
test(contains (x["bla"], "blu"), 1);
test(contains (x["bla"], "bla"), 0);
x["blabla"]["blablu"]=125;
test(--x["bla"]["blu"] + x["blabla"]["blablu"]--, 237);

b[5][3][5][3]=15;
AddText(textView, ++b[5][3][5][3]);
AddText(textView, ++b[5][3][5][1]);
b[5][3][5][3]*=1000;
test(b[5][3][5][3], 16000);
test(size(b), 6);
test(size(b[5]), 4);
test(size(b[5][3]), 6);
test(size(b[5][3][5]), 4);
test(size(b[5][3][5][3]), 5);

bla="bla";
x["bla"]=13;
x["blabla"]=26;
test(x["bla"], 13);
test(size(x), 2);
test(contains(x, "bla") , 1);
test(contains(x, "bla2"), 0);
test(x["bla"] + x["blabla"], 39);

x["bla"]["blu"]=113;
test(contains(x["bla"], "blu"), 1);
test(contains(x["bla"], "bla"), 0);
x["bla"]["blu"]++;
test(x["bla"]["blu"], 114);
x["blabla"]["blablu"]=126;
--x["blabla"]["blablu"];
test(x["blabla"]["blablu"], 125);

test(--x["bla"]["blu"] + x["blabla"]["blablu"]--, 238);
AddText(textView, --x["blabla"]["blablu"]);
AddText(textView, --x["blabla"]["blablu"]);
AddText(textView, --x["blabla"]["blablu"]);
AddText(textView, x["blabla"]["blablu"]++);
AddText(textView, x["blabla"]["blablu"]++);
AddText(textView, x["blabla"]["blablu"]++);

x = 20 * sin(pi^2);
cache["if"] = -10 * x;
cache["else"] = 10 * x;

if (x < 0 && log(x + 3*10^2) < 6*exp(x) ||
             x < 1 - pi) {
  AddText(textView, "OK, in if, x=" + x + " + cache=" + cache["if"]);
} else {
  AddText(textView, "ERROR, in else, cache=" + cache["else"]);
}


a={0};
i = 0;
while(++i < 10) {
  add(a, 2*i);
}

AddText(textView, "a=" + a);

i -= 5;
d=a[--i];
test(d, 8);
test(i, 4);

n=1.5;
try {
  c = catalan(n);
  AddText(textView, "catalan(" + n + ")=" + c);
  AddText(textView, "ERROR. Exception needed for n=" + n);
} catch(exc) {
  AddText(textView, "OK. Caught: " + exc);
}
n=-10;
try {
  c = catalan(n);
  AddText(textView, "catalan(" + n + ")=" + c);
  AddText(textView, "ERROR. Exception needed for n=" + n);
} catch(exc) {
  AddText(textView, "OK. Caught: " + exc);
}
n=10;
try {
  c = catalan(n);
  AddText(textView, "catalan(" + n + ")=" + c);
} catch(exc) {
  AddText(textView, "ERROR. Caught: " + exc);
}

f = fibonacci(n);
AddText(textView, "fibonacci(" + n + ")=" + f);
test(f, 55);
c = catalan(n);
AddText(textView, "catalan(" + n + ")=" + c);
test(c, 16796);

i = 0; b = 0;
while(i < 13)
{
  b += (i*4 - 1);
  i++;
  if ( i >= 4) {
    AddText(textView, "in if, i==" + i + " + break");
    break;
  } else {
    AddText(textView, "in else, i==" + i + " + continue");
    continue;
  }
  AddText(textView, "this is never reached", "red");
}
AddText(textView, "while() done");

n = 0; y = 1;
a =  !!!n && !!y;
test(a, 1);
b =  !a || !y || n;
test(b, 0);
c =  !!(!y || !n && y);
test(c, 1);

a = 1+(25-2*3);
arr2 = {++a-a--, ++a*exp(0)/a--, -2*(--a-++a), ++a/(a/3), 2 * sqrt(pow(2, 2))};
AddText(textView, arr2);
i = 0;
while(i < size(arr)) {
  AddText(textView, "arr2[" + i + "]=" + arr2[i] + ", expecting " + i);
  i++;
}

if (2*pow(2,4) > pow(2,5)*2 || factorial(3) == 24) {
  AddText(textView, "if not expected", "red");
} elif(exp(3) <= (3*(pow(2,3)+1)-(1-sin(pi))) && factorial(4) == 24) {
  AddText(textView, exp(3) + "<=" + (3*(pow(2,3)+1)-(1-sin(pi))) + " expected");
} else {
  AddText(textView, "else not expected");
}

AddText(textView, "");

x = sin(pi*2);
if (x < 0 && log(x + 3*10^2) < 6*exp(x) ||
             x < 1 - pi) {
  AddText(textView, "in if, x=" + x);
} else {
  AddText(textView, "in else, x=" + x);
}

b = "bla";
i = 0;
while(i < 13)
{
  b += (i*4 - 1);
  i++;
  if ( i == 3) {
    break;
  } else {
    continue;
  }
  AddText(textView, "this is never reached", "red");
}
test(b, "bla-137");

AddText(textView, "who are \"you\" my friend?" + " e=" + (0+exp(1)-2*sin(0)) + ", pi=" + pi);

a = 23; b = 22;
cond = "na";
if (a < b) {
  if (b < 15) {
    cond = "cond1";
  }
  elif  (b < 50) {
    cond = "cond2";
  }
}
elif (a >= 25) {
  cond = "cond3";
}
else {
  cond = "cond4";
}
test(cond, "cond4");
AddText(textView, "");

a=1;
b=2;
c=0;
test(a&&c, 0);
test(a||c, 1);
test(a||b, 1);
test(!a&&!b, 0);
test(!a && !c, 0);
test(! a || !c, 1);
test(!a || !b, 0);
test(a && b && !c, 1);
test(a || b ||  c, 1);
test(!a || !b || c, 0);

i = 10;
while(--i > 0) {
  newarray[i] = 2*i;
}
AddText(textView, "size(newarray)=" + size(newarray));
test(i, 0);
test(newarray[9], 18);
test(size(newarray), 10);

function trySuite(n) {
  AddText(textView, "Trying to calculate negative factorial...");
  result = tryNegative(n);
  return result;
}

function tryNegative(n) {
  return factorial(-1 * n);
}
function tryNonInteger(n) {
  return factorial(n + 0.5);
}
function tryZeroDivision() {
  return cot(0);
}

function variableTest() {
  AddText(textView, "In function start, n=" + n);
  n = sqrt((32*8*4 - 10*(3+7) + 19*4) * 10) / 5;
  test(n, 20);
  AddText(textView, "In function end, n=" + n);
}

function convertToNegative(n) {
  return -1 * n;
}
n = 5;
try {
  f = trySuite(n);
  AddText(textView, "factorial(" + n + ")=" + f);
}
catch(exc) {
  AddText(textView, "Caught Exception: " + exc, "red");
}

try {
  f = tryNonInteger(n);
  AddText(textView, "factorial(" + n + ")=" + f);
}
catch(exc) {
  AddText(textView, "Caught Exception: " + exc, "red");
}

try {
  AddText(textView, "Trying zero division...");
  f = tryZeroDivision();
  AddText(textView, "cot(0)=" + f);
}
catch(exc) {
  AddText(textView, "Caught Exception: " + exc, "red");
}

AddText(textView, "After try-catches");

n *= 2;
f=factorial(n);
AddText(textView, "factorial(" + n + ")=" + f);

variableTest();
AddText(textView, "After function, n=" + n);

for (i = 10; i >= 0; i--) {
  write(i, " ");
  array[i] = 2*i;
}
i = 10;

AddText(textView, "");
for (;;) {
  write(i, " ");  array[i] = 2*i;
  i--;
  if (i < 0) { break; }
}
AddText(textView, "");
for (item : array) {
  write(item, " ");
}
AddText(textView, "");
test("x","x");

test1 = {0,3,5};
test1[1][2]=3;

if(test1[1][2] == 3) { result="equal";}
else { result="not equal"; }
test(result, "equal");

if(test1[1] == 5) { result="equal";}
else { result="not equal"; }
test(result, "not equal");

if(3 == test1[2]) { result="equal";}
else { result="not equal"; }
test(result, "not equal");

if(5 == test1[2]) { result="equal";}
else { result="not equal"; }
test(result, "equal");

ab=2;
if(ab == 2) { result="equal";}
else { result="not equal"; }
test(result, "equal");

if(2 != ab) { result="equal";}
else { result="not equal"; }
test(result, "not equal");

if (sin(10) > -1) { result = "sintestOK"; }
else { result = "sintestNotOK";  }
test(result, "sintestOK");

objName = "Columns";
if (indexof(objName,"Columns") > -1) { result = "indexofOK"; }
else { result = "indexofNotOK";  }
test(result, "indexofOK");

objName = "aColumns";
if (indexof(objName,"Columns") < 1) { result = "indexofNotOK"; }
else { result = "indexofOK";  }
test(result, "indexofOK");

test1 = {1,0};
test2 = {0,1};
if (test1 != test2) { result = "not equal";}
else {  result = "equal"; } 
test(result, "not equal");

test2 = {1,0};
if (test1 != test2) { result = "not equal";}
else {  result = "equal"; } 
test(result, "equal");

if (1==2 || 2==2) { result = "true"; }
else { result = "false"; }
test(result, "true");

if (2==2 || 1==2) { result = "true"; }
else { result = "false"; }
test(result, "true");

if (1==2 && 2==2) { result = "true"; }
else { result = "false"; }
test(result, "false");

if (2==2 && 1==2) { result = "true"; }
else { result = "false"; }
test(result, "false");
function threadWork() {
  sleep(10);
  //AddText(textView, "  Starting thread work in thread" + threadid());
  //sleep(1000);
  //AddText(textView, "  Finishing thread work in thread" + threadid());
  signal();
}

AddText(textView, "Main, starting new thread from " + threadid());
thread(threadWork());
AddText(textView, "Main, waiting for thread in " + threadid());
wait();
AddText(textView, "Main, wait returned in " + threadid());

function returnTest(par) {
  if (par <= 10) {
    return 1;
  } elif (par <= 20) {
    b = 20;
    return 2;
  } elif (par <= 30) {
    return 3;
    b = 30;
  } elif (par <= 40) {
    b = 40;
    return 4;
    b = 50;
  }
  b = 60;
  return 5;
}
b = 10;
result = returnTest(9);
test(result, 1); test(b, 10);
result = returnTest(19);
test(result, 2); test(b, 20);
result = returnTest(30);
test(result, 3); test(b, 20);
result = returnTest(40);
test(result, 4); test(b, 40);
result = returnTest(50);
test(result, 5); test(b, 60);

a[0] = 0;
b[a[0]] = 1;
test(b[a[0]], 1);

c[b[a[0]]] = 5;
test(c[b[a[0]]], 5);

a=-2; b=2;
f1 = a > 0 && b < 0 ? 10 : -10;
test(f1, -10);
f2 = a < 0 && b < 0 ? 10 : -10;
test(f2, -10);
f3 = a < 0 && b > 2 ? 10 : -10;
test(f3, -10);
t1 = a < 0 && b > 0 ? 10 : -10;
test(t1, 10);
s1 = a < 0 ? -20 : b > 0 ? 20 : -30;
test(s1, -20);
s2 = a > 0 ? -20 : b > 0 ? 20 : -30;
test(s2, 20);
s3 = a > 0 ? -20 : b < 0 ? 20 : -30;
test(s3, -30);

end = pstime;
AddText(textView, "Process CPU Time: " + end + " ms. Script execution: " + (end - start) + " ms.");
