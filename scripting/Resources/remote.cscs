Version      = _APPVERSION_;
AppName      = "TrueDividends";
WebSite      = "TrueDividends.com";

// 16.2.0.41
InitSyncfusion("MjEzMjM3QDMxMzYyZTMyMmUzMG8zdVhtRjZlYzJmZGNaNzkwTlRNeVFMZkxyVld5QjBuRFBMYUZhdEV1QlU9");
// 17.4.0.39
//InitSyncfusion("MjEzMjM4QDMxMzcyZTM0MmUzMFpUdERwTWxzdGJwbm43Mit3dk1qZXpqcTZCcUdMaDM4YTlidktSY2Q1M2s9");
// 18.1.0.42
//InitSyncfusion("MjM0MTk0QDMxMzgyZTMxMmUzMElTRkt2dmpPUFdoN0NhaFlGT2NNT25UMnA4TGRzanJVckw0dXE5WnZ3Nzg9");
//InitIAP();

data          = {};
prices        = {};
dividends     = {};
expDividends  = {};
stddevs       = {};
stockData     = {};
keys          = {};
stocks        = {};

volaData      = {};
volas         = {};
selVolas      = {};
unselVolas    = {};
volaParams    = {};
selCallPuts   = {};
unselCallPuts = {};
minVolaPrice  = {};
maxVolaPrice  = {};
dates         = {};
expiries      = {};
optionDataArr = {}; 
isin          = "";
connected     = false;
loggedIn      = false;
busy          = false;
optionsLoaded = false;
init          = true;
busyIndex     = 0;
busyOptions   = {"ball", "battery", "box", "doublecircle", "ecg", "gear", "globe", "pulsing",
                 "movie", "print", "rectangle", "rollingball", "singlecircle", "slicedcircle", "zooming"};

graphColors  = {"dark_green", "yellow", "red", "blue", "orange", "purple", "brown", "pink", "gray", "rose",
                "magenta", "silver", "black", "white", "deep_sky_blue", "deep_pink", "sky_blue", "light_cyan",
                "light_yellow", "light_blue", "light_green", "dark_gray", "dark_green", "dark_red", "dark_blue", "green"};
hack     = false;//_DEBUG_;
markets  = { "Market", "CH", "DE", "US" };
market   = "";
starting = true;
lastStockLoaded = "";
lastVolaLoaded = "";
lastAnalysisLoaded = "";
ccy = "";

stocksHeader  = "Select Stock";
volaHeader    = "Implied & CurveFit Volatilities";
callputHeader = "Expiries for Calls & Puts";

prevStockSelection   = "";
prevVolaSelection    = "";
prevCallPutSelection = "";

volaParamsData       = {};

toolTipWidth  = 150;
toolTipHeight = 70;

productId    = "ch.mydividends.vk.iap1";
purchased    = GetSetting("purchased", "bool", false);

//listCols = {"Instrument", "string", "Bid", "number", "Ask", "number", "Last", "number", "Settle", "number"};
//colWidth = {40, 15, 15, 15, 15};
listCols = {"Instrument", "string", "Settle", "number"};
colWidth = {70, 30};
bestStocksCols = {"Instrument", "string", "Rel.Divid.", "number", "Std.Dev.", "number", "Ratio", "number"};
bestStocksWidth = {40, 20, 20, 20};

allowedStocks = { "AAPL", "ABBN", "BAY" };
stock = GetSetting("stock", "string", "ABBN");
stockMenu = GetSetting("stockMenu", "string", stocksHeader);
printConsole("Starting with fav. stock: " + stock);

username = "test";//GetText(textLogin);
password = "test";//GetText(textPassword);

toastBg = "gray";
toastFg = "blue";

SetBackgroundColor("black");
colorFg1 = "white";
colorFg2 = "light_gray";
SetFontColor(colorFg1);

AutoScale(1.0);

function onInit(sender, arg) {
  printConsole("onInit: " + arg);
  if (arg != "OK") {
    AlertDialog(AppName, arg);
    makeUnbusy();
    return;
  }
  GetDataFromServer("allstocks", "", "loadAllStocks");
}

function onException(sender, errorMsg, arg) {
  makeUnbusy();
  if (_DEBUG_) {
    if (arg.Length > 20) {
      ShowToast(sender + " " + arg, 10, "yellow", "dark_red");
      Sleep(2000);
      ShowToast(errorMsg, 10, "yellow", "dark_red");
    } else {    
      ShowToast(sender + " " + arg + ": " + errorMsg, 10, "yellow", "dark_red");
    }
  }
}

function startUp() {
  reset_purchase_restore();
  makeBusy();
  //printConsole("Logging in user " + username);
  loggedIn = Login(username, password, "onInit");
}

function makeBusy() {
  //PrintConsole("-- makeBusy1()");
  makeUnbusy();
  locBusy = GetLocation("ROOT", "CENTER", "ROOT", "BOTTOM", 0, -300);
  AddSfBusyIndicator(locBusy, "BusyIndicator", "", busySize, busySize);
  
  if (++busyIndex >= busyOptions.size) {
    busyIndex = 0;
  }
  busyType = busyOptions[busyIndex];
  SetValue(BusyIndicator, "type",  busyType);
  SetValue(BusyIndicator, "color", "light_gray");
  SetValue(BusyIndicator, "secondary_color", "red");
  //SetValue(BusyIndicator, "duration", stepperValue);
  busy = true;
  //PrintConsole("-- makeBusy2()");
}

function makeUnbusy() {
  RemoveViewIfExists(BusyIndicator);
  busy = false;
  //PrintConsole("-- makeUnBusy()");
}

function tabSelected(sender, arg) {
  newtab = int(arg);

  //ShowHideKeyboard(textStock, false);
  if (newtab == currentTab) {
    return;
  }
  if (busy) {
    ShowToast("Please wait till data is loaded", 5, "yellow", "dark_green");
    SelectTab(currentTab);
    return;
  }
  if (!connected) {
    if (newtab == 0) {
      currentTab = 0;
      return;
    }
    ShowToast("Please connect first", 5, "yellow", "dark_green");
    SelectTab(0);
    return;
  }
  if (!checkStockOK()) {
    ShowToast("Please purchase unlimited stocks or select a free stock", 5, "yellow", "dark_green");
    SelectTab(currentTab);
    return;
  }
  currentTab = newtab;
  printConsole("tabSelected :" + newtab);

  makeBusy();
  if (newtab == 1) {
    if (stock == lastAnalysisLoaded && NameExists(DivGraph1)) {
      makeUnbusy();
      return;
    }
    RemoveViewIfExists(DivGraph1);
    RemoveViewIfExists(DivGraph2);
    GetDataFromServer("dividends", stock, "fillDividendsData");
  } elif (newtab == 2) {
    if (stock == lastVolaLoaded && NameExists(VolaGraph1)) {
      makeUnbusy();
      return;
    }
    RemoveViewIfExists(VolaGraph1);
    RemoveViewIfExists(VolaGraph2);
    HideView(volainfo);
    GetDataFromServer("a_volas", stock, "fillVolasData");
  } elif (newtab == 3) {
    if (NameExists(DataGrid)) {
      makeUnbusy();
      return;
    }
    GetDataFromServer("beststocks", stock, "fillBestStocks");
  } else {
    makeUnbusy();
  }
}

function buttonAboutUs_click(sender, arg) {
  freeSp  = Round(Double(_FREESPACE_ / 1024), 2);
  totalSp = Round(Double(_TOTALSPACE_ / 1024), 2);
  AlertDialog(AppName, " \nVersion " + VERSION + " \n" +
              "Built: " + _BUILDTIME_ + " \n" +
               _DEVICE_INFO_ + ": " + _VERSION_INFO_ + " \n" +
              "Screen: " + DisplayWidth + " x " + DisplayHeight + " \n" +
              "DPI: " + DisplayDPI + " \n" +
              "RAM: " + _TOTALRAM_ + " MB\n" +
              "App Usage: " + _USEDRAM_ + " MB\n" +
              "Free Space: " + freeSp + "/" + totalSp + " GB\n" +
              "Developed by: " + WebSite + " \n");
}

function buttonWriteUs_click(sender, arg) {
  //AlertEditDialog(AppName, "Please fill out the stock info....");
  //locDia = GetLocation("ROOT", "CENTER", "ROOT", "CENTER", 0, 0);
  AddCustomDialog({"Please suggest a stock you would like to see in this app.", "Stock:", "stock to add"},
                  {"Submit", "stockSubmitted", "Cancel"});
}

function buttonRateUs_click(sender, arg) {
  AlertDialog(AppName, "You will be redirected to the AppStore Review page. \n" +
                       "Please write there what stocks you would like to include. \n" +
                       "Your general feedback will also be appreciated.",
                       "OK", "feedback_click", "Cancel");
}

function stockSubmitted(sender, arg) {
  if (arg == "") {
    AlertDialog(AppName, "Please fill out the stock info.");
    return;
  }
  PrintConsole("Submitting stock: [" + arg + "] ...");
  GetDataFromServer("feedback", arg, "stockSuggested");
}

function stockSuggested(sender, arg) {
  PrintConsole("Submited stock: [" + arg + "]");
  if (arg == "" || arg.StartsWith("Error") || arg.StartsWith("Couldn't")) {
    AlertDialog(AppName, "Couldn't connect to the server.");
    return;
  }
  AlertDialog(AppName, "Feedback sent.");
}

function feedback_click(sender, arg) {
  if (_IOS_) {
    appStoreURL = "itms-apps://itunes.apple.com/app/id1496880473?action=write-review";
  } elif (_ANDROID_) {
    appStoreURL = "https://play.google.com/store/apps/details?id=ch.ilanguage.android";
  }
  OpenUrl(appStoreURL);
}

function volainfo_click(sender, arg) {
  /*text = "\nFitting Volatility Curve:\n" + "y = p1 + p2*log(x/p4) + p3*log(x/p4)^2\n\n";
  count = 0;
  if (volaParams.Size > 0 && selVolas.Size > 0) {
    text += "Where {p1 p2 p3 p4} parameters are:\n"
  }
  for (date : selVolas) {
    if (volaParams.Contains(date)) {
      text += volaParams[date] + "\n";
    }
    if (++count > 2) {
      break;
    }
  }*/
  text = "First graph is the Implied Volatility graph and second graph is the parametrized curve that estimates volatility.\n\n" +
         "Stay tuned for the refined parametrization (SVI).";

  AlertDialog(AppName, text);
}

function perfinfo_click(sender, arg) {
  text = "\nThe second column shows the dividend relative to the stock price.\n\n" +
         "The third one shows the stock standard deviation.\n\n" +
         "The last column shows the ratio between them: the larger the value, the more attractive we can expect the stock to be.\n";

  AlertDialog(AppName, text);
}

function buttonSendMail_click(sender, arg) {
  stockToSuggest = GetText(textSuggest).Trim;
  if (stockToSuggest == "") {
    AlertDialog(AppName, "Please provide stock name");
    return;
  } 
  SendEmail("Suggest Stock", "Please include stock " + stockToSuggest);
}

function allStocksCombo_click(sender, arg) {
  if (busy) {
    return;
  }
  PrintConsole("allStocksCombo_click " + sender + " -- " + arg + " init " + init);
  setStock(arg);
  if (stocks.size <= 1) {
    if (!init) {
      ShowToast("Please reconnect first...", 7, "yellow", "dark_green");
    }
    return;
  }
  Schedule(100, "buttonConnect_click");
}

function setStock(arg) {
  stockMenu = arg.Trim;
  items = stockMenu.Split(' - ');
  stock = items.First.Trim.Upper;

  for (stocki : stocks) {
    if (stocki.Upper.StartsWith(stock)) {
      stockMenu = stocki;
      break;
    }
  }
  if (stock.StartsWith("___")) {
    stock = stock.Substring(3);
    stockMenu = stockMenu.Substring(3);
    hack = true;
    purchased = true;
  }
  SetSetting("stock", stock);
  SetSetting("stockMenu", stockMenu);
  printConsole("Stock selected " + arg + " --> " + stock + ", " + stockMenu + ", hack=" + hack);
}

function checkStockOK() {
  printConsole("checkStockOK stock =" + stock);
  if (!hack && !purchased && stock != "" && !allowedStocks.Contains(stock)) {
    allowed = "";
    for (i = 0; i < allowedStocks.Length; i++) {
      allowed += allowedStocks[i];
      if (i < allowedStocks.Length - 1) {
        allowed += ", ";
      }
    }
    AlertDialog(AppName, "Only these stocks can be used for free:\n" + allowed + "." +
                         "\nDo you want to purchase unlimited usage?",
                         "OK", "buttonPurchase_click", "Cancel");
    return false;
  }
  return true;
}

function checkStockPaid() {
  printConsole("checkStockPaid stock =" + stock);
  setStock(stock);
  if (!checkStockOK()) {
    return false;
  }
  return true;
}

function buttonConnect_click(sender, arg) {
  stock = GetText(allStocksCombo).Trim;
  printConsole("buttonConnect_click stock =" + stock);
  if (stock == "" || stock.Upper == stocksHeader.Upper) {
    AlertDialog(AppName, "Please provide a valid stock name");
    return;
  }

  if (!checkStockPaid()) {
    return;
  }

  makeBusy();
  cleanUpViews();

  SetSetting("stock", stock);
  //ShowHideKeyboard(textStock, false);

  printConsole("buttonConnect_click stocks.size =" + stocks.size);
  if (stocks.size == 0) {
    GetDataFromServer("allstocks", "", "loadAllStocks");
  } else {
    onConnect(sender, "OK");
  }
}

function loadAllStocks(sender, arg) {
  init = false;
  stocks              = {};
  stocks.Add(stocksHeader);
  stockData = arg.Split("!");
  printConsole("LoadAllStocks " + stockData.Size + " stocks: " + arg);
  for (item : stockData) {
    parts = item.Split('|');
    if (parts.Size < 2) {
      continue;
    }
    stocki         = parts[0];
    stockName      = parts[1];
    displayName   = stockName == "" ? stocki : stocki + " - " + stockName;
    //displayName   += avail ? "" : " *";
    stocks.Add(displayName);
  }
  
  AddWidgetData(allStocksCombo, stocks);
  //SetValue(allStocksCombo, "value", 0);
  SetText(allStocksCombo, stock);

  onConnect(sender, "OK");
}

function onConnect(sender, arg) {
  printConsole("onConnect " + arg);
  setConnectionStatus(arg);
}

function setConnectionStatus(arg) {
  if (arg == "") {
    arg = "Connection reset";
  }
  printConsole("Setting connection status: [" + arg + "]");
  if (arg == "OK") {
    connectionSuccess();
    if (stock != "" && stock.Upper != stocksHeader.Upper && checkStockPaid()) {
      GetDataFromServer("stockinfo", stock, "onStockData");
      return;
    }
  } else {
    SetText(labelStatus2,  "Disconnected");
    SetFontColor(labelStatus2, "red");
    AlertDialog(AppName, arg);
  }
  makeUnbusy();
}

function onStockData(sender, arg) {
  //PrintConsole("OnStockData: " + arg);
  // CH0012221716|23.0300006866455|0.0932817980647087|2020-01-29|2020-05-06|CHF 0.957409977912903 on 2020-05-06

  stockData = arg.Split("|");
  size = stockData.Size();
  if (size < 8) {
    setConnectionStatus(arg);
    return;
  }

  std = stockData[2] != "" ? (double(stockData[2]) * 100) + "%" : "";
    
  curr = stockData[5].substring(0, 3);
  SetText(textIsin,    stockData[0]);
  SetText(textClose,   stockData[1]);
  SetText(textStd,     std);
  SetText(textUpdate,  stockData[3]);
  SetText(textLastDiv, stockData[5]);
  SetText(textNextDiv, stockData[6]);
  market = stockData[7];

  ShowView(labelIsin);
  ShowView(textIsin);
  ShowView(labelClose);
  ShowView(textClose);
  ShowView(labelLastDiv);
  ShowView(textLastDiv);
  ShowView(labelNextDiv);
  ShowView(textNextDiv);
  ShowView(labelStd);
  ShowView(textStd);
  ShowView(labelUpdate);
  ShowView(textUpdate);

  makeUnbusy();
}

function cleanUpViews() {
  RemoveViewIfExists(DataGrid);
  RemoveViewIfExists(labelCcy);
  RemoveViewIfExists(imageCcy);
  RemoveViewIfExists(DivGraph1);
  RemoveViewIfExists(DivGraph2);
  RemoveViewIfExists(StdGraph);
  RemoveViewIfExists(VolaGraph1);
  RemoveViewIfExists(VolaGraph2);
  RemoveViewIfExists(SplineGraph1);
  RemoveViewIfExists(SplineGraph2);

  lastStockLoaded = "";
  lastVolaLoaded = "";
  lastAnalysisLoaded = "";
}

function stockSelected(sender, arg) {
  if (arg == "" || arg == stocksHeader || prevStockSelection == arg) {
    makeUnbusy();
    return;
  }
  prevStockSelection = arg;

  stock = arg;
  //printConsole("stockSelected: [" + stock + "]");

  cleanUpViews();
  makeBusy();
  parts = arg.Split(' ');
  stock = parts.First;
  //GetDataFromServer("optionprices", stock, "fillStockData");
  //printConsole("Requested data for " + stock + ". Market: " + market);
}

function getBestData(stockData, pattern) {
  //ABBN_C_2020-04-17

  result = {};
  if (selCallPuts.Size == 0 && expiries.Size > 2) {
    selCallPuts.Add(expiries[1]);
    unselCallPuts.Remove(expiries[1]);
  }
  for (expiry : selCallPuts) {
    result.Add(stock + pattern + expiry);
  }
  return result.Sort();
} 

function createGraph(locSFGraph, graphName, graphTitle, stockData, keys,
                     primary_axis = "Strike", secondary_axis = "Price", toolTipTitle = "") {
  AddSfSplineGraph(locSFGraph, graphName, "", graphWidth, graphHeight);
  //PrintConsole("... createGraph " + graphName + ": " + keys);

  colorIndex = -1;
  for (key : keys) {
    if (++colorIndex >= graphColors.size) {
      colorIndex = 0;
    }
    //printConsole("-- GraphData " + graphName + " " + key + ": " + graphColors[colorIndex]);
    addDataToGraph(graphName, stockData, key, graphColors[colorIndex]);
  }

  if (graphTitle != "") {
    SetText(graphName,  graphTitle);
  }
  if (primary_axis != "") {
    SetValue(graphName, "primary_axis", primary_axis);
  }
  if (secondary_axis != "") {
    SetValue(graphName, "secondary_axis", secondary_axis);
  }
  
  setToolTip(graphName, toolTipWidth, toolTipHeight, "yellow", "purple", 12, "coins", 30, 50,
     primary_axis + ": ", secondary_axis + ": ", toolTipTitle);
}

function setToolTip(graphName, width=100, height=50,
                    bgcolor="orange", fgcolor="dark_blue", fontSize=11,
                    image="", imageWidth=30, imageHeight=50,
                    xPrefix = "", yPrefix = "", toolTipTitle = "") {
  SetValue(graphName, "tooltip", width + ":" + height);
  SetValue(graphName, "tooltip_bgcolor", bgcolor);
  SetValue(graphName, "tooltip_font", fgcolor + ":" + fontSize);
  
  if (image != "") {
    SetValue(graphName, "tooltip_image", "coins");
    SetValue(graphName, "tooltip_image_size", imageWidth + ":" + imageHeight);
  }
  if (xPrefix != "") {
    SetValue(graphName, "tooltip_xprefix", xPrefix);
  }
  if (yPrefix != "") {
    SetValue(graphName, "tooltip_yprefix", yPrefix);
  }
  if (toolTipTitle != "") {
    SetValue(graphName, "tooltip_title", toolTipTitle);
  }
}

function addDataToGraph(graphName, graphData, key, colors) {
  if (key == "") {
    return;
  }
  chartData = graphData[key];
  parts = key.Split('_');
  dataTitle = parts.Last;
  AddWidgetData(graphName, chartData, dataTitle, colors);
}

function loadStockWarning() {
  makeUnbusy();
  ShowToast("Loading stock data first...", 7, "yellow", "dark_green");
}

function createGraphs() {
  RemoveViewIfExists(SplineGraph1);
  RemoveViewIfExists(SplineGraph2);
  RemoveViewIfExists(callputWidget);

  if (stock == "" || !data.Contains(stock)) {
    ShowToast("Load stock data first...", 7, "yellow", "dark_green");
    return;
  }

  stockData = data[stock];
  //PrintConsole("StockData: " + stockData);
  //PrintConsole("expiries: " + expiries);

  keys = getBestData(stockData, "_C_");
  PrintConsole("keys: " + keys);
  if (keys.Size == 0 || keys[0] == "") {
    makeUnbusy();
    return;
  }

  lastPriceMsg = stock + (prices.Contains(stock) ? " (ATM " + prices[stock] + ")" : "");

  locComboCallPuts = GetLocation("ROOT", "CENTER", "ROOT", "TOP", 0, extraTop);
  AddCombobox(locComboCallPuts, "callputWidget", "", 530, 50);
  AddWidgetData(callputWidget, expiries, "callPutSelected", "left");
  SetFontSize(callputWidget, fontSizeSm);
  SetValue(callputWidget, "alignment", "center");
  SetValue(callputWidget, "fontcolor", "red");
  SetValue(callputWidget, 0, "black");
  AddAction(callputWidget, "callPutSelected");

  locSFGraph1 = GetLocation("ROOT", "CENTER", callputWidget, "BOTTOM");
  createGraph(locSFGraph1, "SplineGraph1", "", stockData, keys, "Strike", "Price", "Call ");

  keys = getBestData(stockData, "_P_");
  if (keys.Size == 0 || keys[0] == "") {
    makeUnbusy();
    return;
  }

  locSFGraph2 = GetLocation("ROOT", "CENTER", SplineGraph1, "BOTTOM", 0, 0);
  createGraph(locSFGraph2, "SplineGraph2", "", stockData, keys, "Strike", "Price", "Put ");
  makeUnbusy();
}

function fillVolasData(sender, arg) {
  PrintConsole("fillVolasData ", stock, ", dates:", dates, ", arg:", ":", arg);
  RemoveViewIfExists(volasWidget);

  locComboVolas = GetLocation("ROOT", "CENTER", "ROOT", "TOP", 0, extraTop);
  AddCombobox(locComboVolas, "volasWidget", "", 530, 50);
  SetValue(volasWidget, "backgroundcolorview2", colorFg1);
  SetFontSize(volasWidget, fontSizeSm + 1);

  points         = arg.Split("\t");
  if (arg == "") {
    volaSelected("", "");
    return;
  } elif (points.Size < 2) {
    setConnectionStatus(arg);
    return;
  }

  volasToShow  = 1;
  volaData     = {};
  selVolas     = {};
  unselVolas   = {};
  volas[stock] = arg;
  
  //CH0012221716|19.2000007629395|0.204589992761612|2019-06-21|2019-05-22   CH0012221716|22|0.234862998127937|2019-06-21|2019-05-22 CH0012221716|32|0.716309010982513|2019-06-21|2019-05-22 CH0012221716|21|0.219237998127937|2019-06-21|2019-05-22 CH0012221716|18.5|0.215332001447678|2019-06-21|2019-05-22   CH0012221716|22.5|0.267089992761612|2019-06-21|2019-05-22   CH0012221716|19.7999992370605|0.203612998127937|2019-06-21|2019-05-22   CH0012221716|17.3999996185303|0.255371004343033|2019-06-21|2019-05-22   CH0012221716|21.5|0.246582001447678|2019-06-21|2019-05-22   CH0012221716|17.6000003814697|0.252440989017487|2019-06-21|2019-05-22   CH0012221716|30|0.638184010982513|2019-06-21|2019-05-22 CH0012221716|20.5|0.204589992761612|2019-06-21|2019-05-22   CH0012221716|17.5|0.254395008087158|2019-06-21|2019-05-22   CH0012221716|19.6000003814697|0.197753995656967|2019-06-21|2019-05-22   CH0012221716|17.2000007629395|0.266113013029099|2019-06-21|2019-05-22   CH0012221716|29|0.597168028354645|2019-06-21|2019-05-22 CH0012221716|20|0.196777001023293|2019-06-21|2019-05-22 CH0012221716|16.5|0.285645008087158|2019-06-21|2019-05-22   CH0012221716|19.3999996185303|0.201660007238388|2019-06-21|2019-05-22   CH0012221716|16.7999992370605|0.278809010982513|2019-06-21|2019-05-22   CH0012221716|28|0.553223013877869|2019-06-21|2019-05-22 CH0012221716|19|0.206542998552322|2019-06-21|2019-05-22 CH0012221716|16.6000003814697|0.298339992761612|2019-06-21|2019-05-22   CH0012221716|27|0.507323980331421|2019-06-21|2019-05-22 CH0012221716|18|0.233887001872063|2019-06-21|2019-05-22 CH0012221716|24.5|0.382324010133743|2019-06-21|2019-05-22   CH0012221716|23.5|0.326660007238388|2019-06-21|2019-05-22   CH0012221716|18.7999992370605|0.208496004343033|2019-06-21|2019-05-22   CH0012221716|16.3999996185303|0.295410007238388|2019-06-21|2019-05-22   CH0012221716|26|0.459473013877869|2019-06-21|2019-05-22 CH0012221716|17|0.273925989866257|2019-06-21|2019-05-22 CH0012221716|19.5|0.200683996081352|2019-06-21|2019-05-22   CH0012221716|18.6000003814697|0.214355006814003|2019-06-21|2019-05-22   CH0012221716|26.5|0.483886986970901|2019-06-21|2019-05-22   CH0012221716|25|0.409667998552322|2019-06-21|2019-05-22 CH0012221716|16|0.335449010133743|2019-06-21|2019-05-22 CH0012221716|18.3999996185303|0.220214992761612|2019-06-21|2019-05-22   CH0012221716|25.5|0.435059010982513|2019-06-21|2019-05-22   CH0012221716|24|0.354979991912842|2019-06-21|2019-05-22 CH0012221716|15|0.435059010982513|2019-06-21|2019-05-22 CH0012221716|18.2000007629395|0.226073995232582|2019-06-21|2019-05-22   CH0012221716|23|0.297363013029099|2019-06-21|2019-05-22 CH0012221716|14|0.488770008087158|2019-06-21|2019-05-22 CH0012221716|17.7999992370605|0.236816003918648|2019-06-21|2019-05-22   CH0012221716|19.2000007629395|0.194823995232582|2019-07-19|2019-05-22   CH0012221716|26|0.330565989017487|2019-07-19|2019-05-22 CH0012221716|21|0.188964992761612|2019-07-19|2019-05-22 CH0012221716|18.3999996185303|0.207519993185997|2019-07-19|2019-05-22   CH0012221716|16.3999996185303|0.254395008087158|2019-07-19|2019-05-22   CH0012221716|22.5|0.214355006814003|2019-07-19|2019-05-22   CH0012221716|19|0.199707001447678|2019-07-19|2019-05-22 CH0012221716|17|0.240722998976707|2019-07-19|2019-05-22 CH0012221716|25.5|0.312988013029099|2019-07-19|2019-05-22   CH0012221716|20.5|0.190917998552322|2019-07-19|2019-05-22   CH0012221716|18.2000007629395|0.212402001023293|2019-07-19|2019-05-22   CH0012221716|27|0.365723013877869|2019-07-19|2019-05-22 CH0012221716|22|0.216308996081352|2019-07-19|2019-05-22 CH0012221716|18.7999992370605|0.200683996081352|2019-07-19|2019-05-22   CH0012221716|16.7999992370605|0.241698995232582|2019-07-19|2019-05-22   CH0012221716|25|0.294434010982513|2019-07-19|2019-05-22 CH0012221716|20|0.187012001872063|2019-07-19|2019-05-22 CH0012221716|18|0.218262001872063|2019-07-19|2019-05-22 CH0012221716|26.5|0.348145008087158|2019-07-19|2019-05-22   CH0012221716|21.5|0.197753995656967|2019-07-19|2019-05-22   CH0012221716|18.6000003814697|0.207519993185997|2019-07-19|2019-05-22   CH0012221716|16.6000003814697|0.248535007238388|2019-07-19|2019-05-22   CH0012221716|24.5|0.274901986122131|2019-07-19|2019-05-22   CH0012221716|19.7999992370605|0.190917998552322|2019-07-19|2019-05-22   CH0012221716|17.7999992370605|0.217285007238388|2019-07-19|2019-05-22   CH0012221716|24|0.255371004343033|2019-07-19|2019-05-22 CH0012221716|19.6000003814697|0.191894993185997|2019-07-19|2019-05-22   CH0012221716|17.6000003814697|0.227051004767418|2019-07-19|2019-05-22   CH0012221716|23.5|0.235839992761612|2019-07-19|2019-05-22   CH0012221716|19.3999996185303|0.192871004343033|2019-07-19|2019-05-22   CH0012221716|17.3999996185303|0.229980006814003|2019-07-19|2019-05-22   CH0012221716|23|0.214355006814003|2019-07-19|2019-05-22 CH0012221716|17.2000007629395|0.229980006814003|2019-07-19|2019-05-22   CH0012221716|19.2000007629395|0.20117199420929|2019-08-16|2019-05-22    CH0012221716|21.5|0.194823995232582|2019-08-16|2019-05-22   CH0012221716|18.6000003814697|0.209472998976707|2019-08-16|2019-05-22   CH0012221716|24|0.210448995232582|2019-08-16|2019-05-22 CH0012221716|19.6000003814697|0.200683996081352|2019-08-16|2019-05-22   CH0012221716|17.6000003814697|0.226073995232582|2019-08-16|2019-05-22   CH0012221716|21|0.193847998976707|2019-08-16|2019-05-22 CH0012221716|18.3999996185303|0.214355006814003|2019-08-16|2019-05-22   CH0012221716|23.5|0.193847998976707|2019-08-16|2019-05-22   CH0012221716|19.3999996185303|0.199707001447678|2019-08-16|2019-05-22   CH0012221716|17.3999996185303|0.228027001023293|2019-08-16|2019-05-22   CH0012221716|20.5|0.193847998976707|2019-08-16|2019-05-22   CH0012221716|18.2000007629395|0.218262001872063|2019-08-16|2019-05-22   CH0012221716|23|0.195801004767418|2019-08-16|2019-05-22 CH0012221716|17.2000007629395|0.231933996081352|2019-08-16|2019-05-22   CH0012221716|16.7999992370605|0.240722998976707|2019-08-16|2019-05-22   CH0012221716|20|0.199707001447678|2019-08-16|2019-05-22 CH0012221716|18|0.219237998127937|2019-08-16|2019-05-22 CH0012221716|22.5|0.200683996081352|2019-08-16|2019-05-22   CH0012221716|19|0.206542998552322|2019-08-16|2019-05-22 CH0012221716|17|0.234862998127937|2019-08-16|2019-05-22 CH0012221716|16.6000003814697|0.244628995656967|2019-08-16|2019-05-22   CH0012221716|24.5|0.226073995232582|2019-08-16|2019-05-22   CH0012221716|19.7999992370605|0.197753995656967|2019-08-16|2019-05-22   CH0012221716|17.7999992370605|0.222167998552322|2019-08-16|2019-05-22   CH0012221716|22|0.202637001872063|2019-08-16|2019-05-22 CH0012221716|18.7999992370605|0.207519993185997|2019-08-16|2019-05-22   CH0012221716|19|0.200194999575615|2019-09-20|2019-05-22 CH0012221716|28|0.276854991912842|2019-09-20|2019-05-22 CH0012221716|16|0.254395008087158|2019-09-20|2019-05-22 CH0012221716|26|0.229980006814003|2019-09-20|2019-05-22 CH0012221716|15|0.271973013877869|2019-09-20|2019-05-22 CH0012221716|18|0.213378995656967|2019-09-20|2019-05-22 CH0012221716|24|0.210448995232582|2019-09-20|2019-05-22 CH0012221716|14|0.312988013029099|2019-09-20|2019-05-22 CH0012221716|17|0.230957001447678|2019-09-20|2019-05-22 CH0012221716|22|0.196777001023293|2019-09-20|2019-05-22 CH0012221716|21|0.193847998976707|2019-09-20|2019-05-22 CH0012221716|30|0.318848013877869|2019-09-20|2019-05-22 CH0012221716|20.5|0.188964992761612|2019-09-20|2019-05-22   CH0012221716|20|0.193847998976707|2019-09-20|2019-05-22 CH0012221716|19|0.20117199420929|2019-12-20|2019-05-22  CH0012221716|27|0.224121004343033|2019-12-20|2019-05-22 CH0012221716|18|0.211426004767418|2019-12-20|2019-05-22 CH0012221716|28|0.229980006814003|2019-12-20|2019-05-22 CH0012221716|26|0.213378995656967|2019-12-20|2019-05-22 CH0012221716|17|0.222167998552322|2019-12-20|2019-05-22 CH0012221716|25|0.212402001023293|2019-12-20|2019-05-22 CH0012221716|16|0.235839992761612|2019-12-20|2019-05-22 CH0012221716|24|0.202637001872063|2019-12-20|2019-05-22 CH0012221716|15|0.255371004343033|2019-12-20|2019-05-22 CH0012221716|23|0.196777001023293|2019-12-20|2019-05-22 CH0012221716|14|0.271973013877869|2019-12-20|2019-05-22 CH0012221716|22|0.190917998552322|2019-12-20|2019-05-22 CH0012221716|12|0.319824010133743|2019-12-20|2019-05-22 CH0012221716|36|0.323729991912842|2019-12-20|2019-05-22 CH0012221716|21|0.190917998552322|2019-12-20|2019-05-22 CH0012221716|32|0.270996004343033|2019-12-20|2019-05-22 CH0012221716|20.5|0.192871004343033|2019-12-20|2019-05-22   CH0012221716|29|0.246582001447678|2019-12-20|2019-05-22 CH0012221716|20|0.192871004343033|2019-12-20|2019-05-22 CH0012221716|30|0.263184010982513|2019-12-20|2019-05-22 CH0012221716|19|0.200194999575615|2020-03-20|2019-05-22 CH0012221716|20|0.193847998976707|2020-03-20|2019-05-22 CH0012221716|30|0.221191003918648|2020-03-20|2019-05-22 CH0012221716|18|0.209472998976707|2020-03-20|2019-05-22 CH0012221716|23|0.190917998552322|2020-03-20|2019-05-22 CH0012221716|17|0.219237998127937|2020-03-20|2019-05-22 CH0012221716|16|0.229003995656967|2020-03-20|2019-05-22 CH0012221716|15|0.240722998976707|2020-03-20|2019-05-22 CH0012221716|28|0.221191003918648|2020-03-20|2019-05-22 CH0012221716|14|0.257324010133743|2020-03-20|2019-05-22 CH0012221716|26|0.203612998127937|2020-03-20|2019-05-22 CH0012221716|24|0.193847998976707|2020-03-20|2019-05-22 CH0012221716|22|0.190917998552322|2020-03-20|2019-05-22 CH0012221716|19|0.188964992761612|2020-06-19|2019-05-22 CH0012221716|29|0.199707001447678|2020-06-19|2019-05-22 CH0012221716|20|0.187987998127937|2020-06-19|2019-05-22 CH0012221716|28|0.200683996081352|2020-06-19|2019-05-22 CH0012221716|27|0.197753995656967|2020-06-19|2019-05-22 CH0012221716|18|0.192871004343033|2020-06-19|2019-05-22 CH0012221716|26|0.189941003918648|2020-06-19|2019-05-22 CH0012221716|16|0.209472998976707|2020-06-19|2019-05-22 CH0012221716|25|0.186035007238388|2020-06-19|2019-05-22 CH0012221716|14|0.227051004767418|2020-06-19|2019-05-22 CH0012221716|24|0.187987998127937|2020-06-19|2019-05-22 CH0012221716|12|0.252440989017487|2020-06-19|2019-05-22 CH0012221716|23|0.187012001872063|2020-06-19|2019-05-22 CH0012221716|10|0.283690989017487|2020-06-19|2019-05-22 CH0012221716|22|0.185058996081352|2020-06-19|2019-05-22 CH0012221716|36|0.243652001023293|2020-06-19|2019-05-22 CH0012221716|21|0.184082001447678|2020-06-19|2019-05-22 CH0012221716|32|0.205566003918648|2020-06-19|2019-05-22 CH0012221716|20.5|0.186035007238388|2020-06-19|2019-05-22   CH0012221716|18|0.198730006814003|2020-12-18|2019-05-22 CH0012221716|27|0.191894993185997|2020-12-18|2019-05-22 CH0012221716|16|0.208496004343033|2020-12-18|2019-05-22 CH0012221716|25|0.190917998552322|2020-12-18|2019-05-22 CH0012221716|12|0.246582001447678|2020-12-18|2019-05-22 CH0012221716|26|0.193847998976707|2020-12-18|2019-05-22 CH0012221716|14|0.224121004343033|2020-12-18|2019-05-22 CH0012221716|24|0.188964992761612|2020-12-18|2019-05-22 CH0012221716|10|0.273925989866257|2020-12-18|2019-05-22 CH0012221716|23|0.189941003918648|2020-12-18|2019-05-22 CH0012221716|22|0.189941003918648|2020-12-18|2019-05-22 CH0012221716|36|0.204589992761612|2020-12-18|2019-05-22 CH0012221716|21|0.190917998552322|2020-12-18|2019-05-22 CH0012221716|32|0.199707001447678|2020-12-18|2019-05-22 CH0012221716|20|0.191894993185997|2020-12-18|2019-05-22 CH0012221716|29|0.198730006814003|2020-12-18|2019-05-22 CH0012221716|19|0.190917998552322|2020-12-18|2019-05-22 CH0012221716|28|0.194823995232582|2020-12-18|2019-05-22 CH0012221716|17|0.202637001872063|2020-12-18|2019-05-22 CH0012221716|18|0.189941003918648|2021-06-18|2019-05-22 CH0012221716|20|0.188964992761612|2021-06-18|2019-05-22 CH0012221716|24|0.187012001872063|2021-06-18|2019-05-22 CH0012221716|19|0.181152001023293|2021-06-18|2019-05-22 CH0012221716|23|0.186035007238388|2021-06-18|2019-05-22 CH0012221716|22|0.187987998127937|2021-06-18|2019-05-22 CH0012221716|32|0.190917998552322|2021-06-18|2019-05-22 CH0012221716|16|0.196777001023293|2021-06-18|2019-05-22 CH0012221716|21|0.187987998127937|2021-06-18|2019-05-22 CH0012221716|28|0.188964992761612|2021-06-18|2019-05-22 CH0012221716|14|0.207519993185997|2021-06-18|2019-05-22 CH0012221716|25|0.187012001872063|2021-06-18|2019-05-22 CH0012221716|12|0.222167998552322|2021-06-18|2019-05-22 CH0012221716|18|0.19140599668026|2021-12-17|2019-05-22  CH0012221716|40|0.202637001872063|2021-12-17|2019-05-22 CH0012221716|23|0.188964992761612|2021-12-17|2019-05-22 CH0012221716|22|0.188964992761612|2021-12-17|2019-05-22 CH0012221716|32|0.192871004343033|2021-12-17|2019-05-22 CH0012221716|21|0.189941003918648|2021-12-17|2019-05-22 CH0012221716|30|0.190917998552322|2021-12-17|2019-05-22 CH0012221716|20|0.190917998552322|2021-12-17|2019-05-22 CH0012221716|29|0.188964992761612|2021-12-17|2019-05-22 CH0012221716|19|0.182128995656967|2021-12-17|2019-05-22 CH0012221716|28|0.187987998127937|2021-12-17|2019-05-22 CH0012221716|27|0.189941003918648|2021-12-17|2019-05-22 CH0012221716|16|0.196777001023293|2021-12-17|2019-05-22 CH0012221716|26|0.188964992761612|2021-12-17|2019-05-22 CH0012221716|14|0.206542998552322|2021-12-17|2019-05-22 CH0012221716|25|0.187987998127937|2021-12-17|2019-05-22 CH0012221716|12|0.218262001872063|2021-12-17|2019-05-22 CH0012221716|24|0.188964992761612|2021-12-17|2019-05-22 CH0012221716|18|0.186523005366325|2022-12-16|2019-05-22 CH0012221716|32|0.191894993185997|2022-12-16|2019-05-22 CH0012221716|16|0.186035007238388|2022-12-16|2019-05-22 CH0012221716|22|0.190917998552322|2022-12-16|2019-05-22 CH0012221716|28|0.189941003918648|2022-12-16|2019-05-22 CH0012221716|14|0.196777001023293|2022-12-16|2019-05-22 CH0012221716|21|0.192871004343033|2022-12-16|2019-05-22 CH0012221716|25|0.189941003918648|2022-12-16|2019-05-22 CH0012221716|12|0.206542998552322|2022-12-16|2019-05-22 CH0012221716|20|0.193847998976707|2022-12-16|2019-05-22 CH0012221716|24|0.189941003918648|2022-12-16|2019-05-22 CH0012221716|40|0.192871004343033|2022-12-16|2019-05-22 CH0012221716|19|0.171387001872063|2022-12-16|2019-05-22 CH0012221716|23|0.190917998552322|2022-12-16|2019-05-22 CH0012221716|36|0.191894993185997|2022-12-16|2019-05-22 CH0012221716|16|0.194335997104645|2023-12-15|2019-05-22 CH0012221716|24|0.190917998552322|2023-12-15|2019-05-22 CH0012221716|18|0.179198995232582|2023-12-15|2019-05-22 CH0012221716|20|0.193847998976707|2023-12-15|2019-05-22 CH0012221716|14|0.195801004767418|2023-12-15|2019-05-22 CH0012221716|12|0.204589992761612|2023-12-15|2019-05-22 CH0012221716|32|0.191894993185997|2023-12-15|2019-05-22 CH0012221716|28|0.189941003918648|2023-12-15|2019-05-22

  title          = key = "Volatilities";
  isin           = "";
  dates          = {};
  
  nbPast = 0; nbFuture = 0;
  //PrintConsole("  looping over  ", points.Size, " vola points.");
  ShowToast("Loaded " + points.Size + " volatility points", 5, toastFg, toastBg);

  count = 0;
  for (point : points) {
    parts      = point.Split("|");
    count++;
    //if (count % 100 == 0) { PrintConsole("  ", count, ". Processing Vola [", point, "] size=", parts.size); }
    if (parts.size < 4) {
      continue;
    }
    isin       = parts[0];
    expiry     = parts[3];
    key        = expiry;
    if (!dates.contains(expiry)) {
      dates.Add(expiry);
      maxVolaPrice[expiry] = 0;
      minVolaPrice[expiry] = 999999;
    }

    x          = Round(double(parts[1]), 2);
    y          = Round(double(parts[2]), 2);

    if (x > maxVolaPrice[expiry]) {
      maxVolaPrice[expiry] = x;
    }
    if (x < minVolaPrice[expiry]) {
      minVolaPrice[expiry] = x;
    }
    if (!x.contains(".")) {
      x = x + ".0";
    }

    AddOrderedData(volaData, key, x, y);
  }

  dates.Sort();
  comboData = dates;
  comboData.Add(volaHeader + " " + stock, 0);

  AddWidgetData(volasWidget, comboData, "volaSelected", "left");
  SetValue(volasWidget, "alignment", "center");
  SetValue(volasWidget, "fontcolor", "red");
  SetValue(volasWidget, 0, "black");
  AddAction(volasWidget, "volaSelected");

  for (date : dates) {
    if (date.StartsWith(volaHeader)) {
      continue;
    }
    if (selVolas.Size < volasToShow) {
      selVolas.Add(date);
      SetValue(volasWidget, date, "dark_green");
    } else {
      unselVolas.Add(date);
      SetValue(volasWidget, date, "dark_red");
    }
  }

  volaSelected("", "");
  PrintConsole("Finished processing " + volaData.Size + " Volas. Dates received: [", dates, "]");
  lastVolaLoaded = stock;
}

function fillVolaParams(sender, arg) {
  points         = arg.Split("\t");
  if (points.Size < 2) {
    setConnectionStatus(arg);
    return;
  }

  //PrintConsole("Processing fillVolaParams [" + arg + "], selVolas: [" + selVolas + "]");
  volaParamsData[stock] = arg;
  volaParams = {};

  paramsData     = {};
  keys           = {};
  volaParams     = {};

  for (point : points) {
    parts      = point.Split("|");
    if (parts.size < 6) {
      continue;
    }
    isin         = parts[0];
    p1           = Round(double(parts[1]), 3);
    p2           = Round(double(parts[2]), 3);
    p3           = Round(double(parts[3]), 3);
    p4           = Round(double(parts[4]), 3);
    key = expiry = parts[5];
    if (!selVolas.Contains(expiry)) {
      //PrintConsole(" SKIPPING EXPIRY: " + expiry);
      continue;
    }

    //PrintConsole("  " + isin + " SETTING Ps: " + p1 + ", " + p2 + ", " + p3 + ", " + p4 + ", expiry: " + expiry);
    if (p4 == 0 || (p2 == 0 && p3 == 0)) {
      continue;
    }
    keys.AddUnique(key);
    volaParams[key] = key + ": {" + p1 + " " + p2 + " " + p3 + " " + p4 + "}";

    lower = minVolaPrice[expiry];
    upper = maxVolaPrice[expiry];
    //PrintConsole("    " + lower + " --> " + upper + " (stock=" + stock + ")");

    for (x = lower; x < upper; x++) {
      lp4 = log(x/p4);
      y = p1 + p2 * lp4 + p3 * lp4 * lp4;
      AddOrderedData(paramsData, key, x, y);
      //PrintConsole("    adding " + key + " --> " + x + " " + y);
    }
  }

  if (paramsData.Size == 0 || keys.Size == 0) {
    PrintConsole("NO VOLA PARAMS TO SHOW");
    makeUnbusy();
    return false;
  }
  
  locVolaGraph2 = GetLocation("ROOT", "CENTER", VolaGraph1, "BOTTOM", 0, 0);
  createGraph(locVolaGraph2, "VolaGraph2", "", paramsData, keys, "Strike", "Vola", "CurveFit ");
  ShowView(volainfo);

  makeUnbusy();
  //PrintConsole("Finished VolaGraph2. keys: " + keys + " --> " + paramsData.Size + " points");
  return true;
}

function callPutSelected(sender, arg) {
  PrintConsole(sender, " callPutSelected: [", arg, "], prevCallPutSelection=", prevCallPutSelection);
  if (arg.StartsWith(callputHeader)) {// || arg == prevCallPutSelection) {
    PrintConsole("No need to reload CallPuts, prevCallPutSelection=", prevCallPutSelection);
    makeUnbusy();
    return;
  }
  prevCallPutSelection = arg;

  //PrintConsole("selCallPuts1=" + selCallPuts + ": " + selCallPuts.Contains(arg));
  if (selCallPuts.Contains(arg)) {
    selCallPuts.Remove(arg);
    unselCallPuts.Add(arg);
    SetValue(callputWidget, arg, "dark_red");
  } else {
    unselCallPuts.Remove(arg);
    selCallPuts.Add(arg);
    SetValue(callputWidget, arg, "dark_green");
  }
  //PrintConsole("selCallPuts2=" + selCallPuts);
  createGraphs();
}

function repaintCallPutWidget(dates) {
  for (date : dates) {
    if (date.StartsWith(callputHeader)) {
      continue;
    }
    if (selCallPuts.Contains(date)) {
      SetValue(callputWidget, date, "dark_green");
    } else {
      SetValue(callputWidget, date, "dark_red");
    }
  }
}

function volaSelected(sender, arg) {
  //PrintConsole(sender, " volaSelected: [", arg, "], prevVolaSelection=", prevVolaSelection);
  if (arg.StartsWith(volaHeader)) {// || arg == prevVolaSelection) {
    PrintConsole("No need to reload Volas, prevVolaSelection=", prevVolaSelection);
    makeUnbusy();
    return;
  }
  prevVolaSelection = arg;

  if (selVolas.Contains(arg)) {
    selVolas.Remove(arg);
    unselVolas.Add(arg);
    SetValue(volasWidget, arg, "dark_red");
  } elif (unselVolas.Contains(arg)) {
    unselVolas.Remove(arg);
    selVolas.Add(arg);
    SetValue(volasWidget, arg, "dark_green");
  }

  printConsole("Redrawing " + selVolas.Size + " Volas for " + stock);
  if (selVolas.Size == 0) {
    makeUnbusy();
    return;
  }

  RemoveViewIfExists(VolaGraph1);
  RemoveViewIfExists(VolaGraph2);
  locVolaGraph1 = GetLocation("ROOT", "CENTER", volasWidget, "BOTTOM", 0, 0);
  createGraph(locVolaGraph1, "VolaGraph1", "", volaData, selVolas, "Strike", "Vola", "Implied ");

  if (volaParamsData.Contains(stock)) {
    fillVolaParams("", volaParamsData[stock]);
  } else {
    GetDataFromServer("volaparams", stock, "fillVolaParams");
  }
}

function printData(d, key, str = "") {
  items = d[key];

  for (elem : items) {
    str += " " + elem;
  }
  PrintConsole(str);
}

function fillStdDevData(sender, arg) {
  RemoveViewIfExists(StdGraph);
  if (arg == "") {
    makeUnbusy();
    return;
  }
  points         = arg.Split("!");
  if (points.Size < 2) {
    setConnectionStatus(arg);
    return;
  }

  stddevs[stock] = arg;
  //PrintConsole(arg);
  title = "Standard Deviation";

  stdData        = {};

  ShowToast("Loaded " + points.Size + " StdDev points", 5, toastFg, toastBg);
  
  for (point : points) {
    parts      = point.Split("|");
    if (parts.size < 4) {
      continue;
    }
    //AAPL|0.450625985860825|320.029998779297|2020-05-10|2020-02-09|2020-02-09
    //PrintConsole("Processing [", point, "] size=", parts.size);
    x          = parts[3];
    y          = Round(double(parts[1]), 4);    
    AddOrderedData(stdData, title, x, y, "str");
  }
  
  //PrintConsole("Loaded ", stdData.size, " stddevs points.");

  if (stdData.size == 0) {
    makeUnbusy();
    return;
  }

  locStdGraph = GetLocation("ROOT", "CENTER", DivGraph1, "BOTTOM", 0, 0);
  AddSfColumnGraph(locStdGraph, "StdGraph", "", graphWidth, graphHeight);

  SetValue(StdGraph, "primary_axis",   "Date");
  SetValue(StdGraph, "secondary_axis", "StdDev");
  SetValue(StdGraph, "string_axis", "x");
  setToolTip(StdGraph, toolTipWidth, toolTipHeight, "orange", "dark_blue", 12, "coins", 30, 50, "", "");
  //SetText(StdGraph,  title);

  addDataToGraph(StdGraph, stdData, title, "blue:blue");
  makeUnbusy();
}

function fillDividendsData(sender, arg) {
  locDivGraph1 = GetLocation("ROOT", "CENTER", "ROOT", "TOP", 0, 2 + extraTop);
  AddSfColumnGraph(locDivGraph1, "DivGraph1", "", graphWidth, graphHeight);
  SetText(DivGraph1,  "Dividends for " + stock);

  if (arg == "") {
    GetDataFromServer("stockstddev", stock, "fillStdDevData");
    return;
  }
  points         = arg.Split("\t");
  if (points.Size < 2) {
    setConnectionStatus(arg);
    return;
  }

  SetValue(DivGraph1, "primary_axis",   "Ex-Dividend Date");
  SetValue(DivGraph1, "secondary_axis", "Payout");
  SetValue(DivGraph1, "string_axis", "x");
  setToolTip(DivGraph1, toolTipWidth, toolTipHeight, "orange", "dark_blue", 12, "coins", 30, 50, "", "");

  dividends[stock] = arg;
  //PrintConsole(arg);
  //CH0012221716|0.800000011920929|0.850000023841858|CHF|Laufende Dividende|2019-05-06  CH0012221716|0.779999971389771|0.850000023841858|CHF|Laufende Dividende|2018-04-04  CH0012221716|0.759999990463257|0.850000023841858|CHF|Laufende Dividende|2017-04-19  CH0012221716|0.239999994635582|0.850000023841858|CHF|Laufende Dividende|2007-05-08  CH0012221716|0.119999997317791|0.850000023841858|CHF|Laufende Dividende|2006-05-09
  
  estimatedTitle = "Estimated Div";
  pastTitle      = "Paid/Declared Div";
  isin           = "";
  divData        = {};
  
  nbPast = 0; nbFuture = 0;
  for (point : points) {
    parts      = point.Split("|");
    if (parts.size < 7) {
      continue;
    }
    isin       = parts[0];
    x          = parts[5];
    y          = Round(double(parts[1]), 2);
    estimated  = Bool(parts[6]);
    nbPast    += !estimated;
    nbFuture  += estimated;
    /*if (!estimated && nbPast > 4) {
      continue;
    }
    if (estimated && nbFuture > 4) {
      continue;
    }*/
    key        = estimated ? estimatedTitle : pastTitle;
    //key        = pastTitle;
    
    AddOrderedData(divData, key, x, y, "str");
    PrintConsole("Processed Dividend [", point, "] size=", parts.size + ", key=", key, ", x=", x, ", y=", y);
  }
  
  PrintConsole("Loaded ", nbPast, " past dividends and ", nbFuture, " estimated for ", isin);

  if (nbPast > 0) {
      addDataToGraph(DivGraph1, divData, pastTitle, "blue:blue");
  } 
  if (nbFuture > 0) {
      addDataToGraph(DivGraph1, divData, estimatedTitle, "orange:orange");
  } 
  lastAnalysisLoaded = stock;
  GetDataFromServer("stockstddev", stock, "fillStdDevData");
}

function fillBestStocks(sender, arg) {
  PrintConsole("fillBestStocks arg=" + arg);
  bestStocks = arg.Split("!");
  if (bestStocks.Size < 2 && !arg.Contains("|")) {
    setConnectionStatus(arg);
    return;
  }

  //C ABBN A 2020-04-17 12.6|0|0|4.6100001335144|4.6100001335144|CHF|EUX|per unit|4/8/2020 12:00:00 AM!
  RemoveViewIfExists(DataGrid);
  locSFWidget = GetLocation("ROOT", "CENTER", "ROOT", "TOP", 0, 4 + extraTop);
  AddSfDataGrid(locSFWidget,  "DataGrid", "", tableWidth, tableHeight);
  SetValue(DataGrid, "header_color", colorFg2);
  AddWidgetData(DataGrid, bestStocksCols, "columns");
  AddWidgetData(DataGrid, bestStocksWidth, "columnWidth");

  bestStocksArr = {};
  for (bestStock : bestStocks) {
    curr = bestStock.Split("|");
    if (curr.size < 4) {
      continue;
    }
    if (!purchased) {
      instr = "Only Paid Version";
      for (i = 0; i < allowedStocks.Length; i++) {
        if (curr[0].Contains(allowedStocks[i])) {
          instr  = curr[0];
          break;
        }
      }
    } else {
      instr  = curr[0];
    }
    reldiv = Round(Double(curr[1]), 2);
    stddev = Round(Double(curr[2]), 2);
    sharpe = Round(Double(curr[3]), 2);
    bestStockData   = {instr, reldiv, stddev, sharpe};
    AddWidgetData(DataGrid, bestStockData, "item");
  }

  makeUnbusy();
  ShowToast("Loaded " + bestStocks.Size + " stocks.", 5, toastFg, toastBg);
  printConsole("Finished fillBestStocks");
}

function showError(msg) {
  SetText(labelLoading,  msg);
  SetFontColor(labelLoading, "red");
  ShowView(labelLoading);
  SetText(labelStatus2,  "Disconnected");
  SetFontColor(labelStatus2, "red");
  HideView(labelRefresh);
  resetButtons();
  
  ShowToast(msg, 10, "white", "red");
}

function hideImage(sender, arg) {
  HideView(arg);
}

function connectionSuccess() {
  timenow = Now("HH:mm:ss");
  SetText(labelStatus2,  "Connected at " + timenow);
  SetFontColor(labelStatus2, "dark_green");

  SelectTab(0);
  connected = true;
}

function resetButtons() {
  for (button : allButtons) {
    if (type(button, true) == "Button") {
      Enable(button, true, false);
      SetText(button, "Load", false);
    }
  }
}

function buttonPurchase_click(sender, arg) {
  ShowToast(Localize("Please wait while purchasing..."), 10, toastFg, toastBg);
  Purchase(productId, "on_purchase");
}

function on_purchase(error, productId) {
  if (error != "") {
    //ShowToast(Localize("Purchase not completed") + " " + error, 6, "red");
    AlertDialog(AppName, Localize("Error Purchasing") + "\n" + error);
    return;
  }

  //description = ProductIdDescription(productId);
  ShowToast(Localize("Purchased Unlimited Usage"), 7, toastFg, toastBg);
  complete_purchase_restore(productId);
  //PrintConsole("Purchased: ", productId, ": ", description);
}

function on_restore(error, productIds) {
  if (error != "") {
    //ShowToast(Localize("Error Restoring:") + " " + error, 8, "red");
    AlertDialog(AppName, Localize("Error Restoring") + "\n" + error);
    return;
  }
  if (productIds == "") {
    //ShowToast(Localize("No purchases to restore"), 8, "red");
    AlertDialog(AppName, Localize("No purchases to restore"));
    return;
  }

  restoredIds = tokenize(productIds, ",");
  restoredStr = " ";
  for (productId : restoredIds) {
    description = ProductIdDescription(productId);
    if (restoredStr != " ") {
      restoredStr += ", ";
    }
    restoredStr += description;
    complete_purchase_restore(productId);
    PrintConsole("Restored: ", productId, ": ", description);
  }
    
  //ShowToast(Localize("Restored Unlimited Usage"), 6, "blue");
  AlertDialog(AppName, Localize("Restored Unlimited Usage"));
}

function complete_purchase_restore(productId) {
  SetSetting("purchased", true, "bool");
  purchased = true;
  reset_purchase_restore();
}

function reset_purchase_restore() {
  if (purchased) {
    //HideView(buttonPurchase);
    HideView(buttonRestore);
  }
}

function buttonRestore_click(sender, arg) {
  ShowToast(Localize("Please wait while restoring..."), 10, toastFg, toastBg);
  Restore("on_restore", productId);
}

//--------- GUI Code Starts Here ----------------

fontSizeSm   = 14;
fontSize     = 26;
textHeight   = 80;
textWidth    = 236;
tokenCount   = 0;
busySize     = 400;

graphWidth   = 620;
graphHeight  = 480;
tableWidth   = 620;
tableHeight  = 1000;
extraTop     = 10;

isiPhoneX    = isiPhoneX();
//isAndroid    = isAndroid();
if (isiPhoneX || isiPhoneXR) {
  graphWidth   = 600;
  graphHeight  = 600;
  tableHeight  = 1200;
  extraTop     = 34;
}

//printConsole("extraTop=" + extraTop);

numberTabs = 4;
currentTab = 0;

AddOrSelectTab("Main",         "main_fin.png",   "main_fin2.png");
AddOrSelectTab("Analysys",     "dividends2.png", "analysys.png");
AddOrSelectTab("Volas",        "vola.png",       "vola2.png");
AddOrSelectTab("Performance",  "table2.png",     "learn2.png");
//AddOrSelectTab("Opt. Charts",  "callput_graph.png", "callput_graph2.png");
//AddOrSelectTab("Opt. Table",   "table2.png",     "learn2.png");

SelectTab(2);

locVolaInfo = GetLocation("ROOT", "RIGHT", "ROOT", "TOP", -2, extraTop);
AddButton(locVolaInfo, "volainfo", "", 50, 50);
AddBorder(volainfo, 0);
SetImage(volainfo, "info_i");

SelectTab(3);

locPerfInfo = GetLocation("ROOT", "RIGHT", "ROOT", "BOTTOM", 0, 0);
AddButton(locPerfInfo, "perfinfo", "", 50, 50);
AddBorder(perfinfo, 0);
SetImage(perfinfo, "info_i");

SelectTab(0);

locLoading = GetLocation("ROOT", "CENTER", "ROOT", "BOTTOM", -80, -120);
AddLabel(locLoading, "labelLoading", "", 580, 160);
AlignText(labelLoading, "center");


locStockLab = GetLocation("ROOT", "LEFT", "ROOT", "TOP", 10, extraTop);
AddLabel(locStockLab, "labelStock", "Stock:", textWidth, textHeight);
SetFontSize(labelStock, fontSizeSm);
SetFontColor(labelStock, colorFg2);

locComboAllStocks = GetLocation(labelStock, "RIGHT", labelStock, "CENTER", 10, 0);
AddCombobox(locComboAllStocks, "allStocksCombo", "::::edit", 380, textHeight - 20);
SetFontSize(allStocksCombo, fontSizeSm);
SetValue(allStocksCombo, "alignment", "center");
SetText(allStocksCombo, stock);
SetValue(allStocksCombo, "backgroundcolorview2", colorFg1);
SetFontColor(allStocksCombo, colorFg1);

locIsinLab = GetLocation("ROOT", "LEFT", labelStock, "BOTTOM", 10, 10);
AddLabel(locIsinLab, "labelIsin", "ISIN:", textWidth, textHeight);
SetFontSize(labelIsin, fontSizeSm);
SetFontColor(labelIsin, colorFg2);

locIsin = GetLocation(labelIsin, "RIGHT", labelIsin, "CENTER", 10);
AddLabel(locIsin, "textIsin", "", textWidth, textHeight);
SetFontSize(textIsin, fontSizeSm);
SetFontColor(textIsin, colorFg1);

locCloseLab = GetLocation("ROOT", "LEFT", labelIsin, "BOTTOM", 10, 10);
AddLabel(locCloseLab, "labelClose", "Close:", textWidth, textHeight);
SetFontSize(labelClose, fontSizeSm);
SetFontColor(labelClose, colorFg2);

locClose = GetLocation(labelClose, "RIGHT", labelClose, "CENTER", 10);
AddLabel(locClose, "textClose", "", textWidth, textHeight);
SetFontSize(textClose, fontSizeSm);
SetFontColor(textClose, colorFg1);

locLastDivLab = GetLocation("ROOT", "LEFT", labelClose, "BOTTOM", 10, 10);
AddLabel(locLastDivLab, "labelLastDiv", "Paid/Declared Dividend:", textWidth, textHeight);
SetFontSize(labelLastDiv, fontSizeSm);
SetFontColor(labelLastDiv, colorFg2);

locLastDiv = GetLocation(labelLastDiv, "RIGHT", labelLastDiv, "CENTER", 10);
AddLabel(locLastDiv, "textLastDiv", "", 380, textHeight);
SetFontSize(textLastDiv, fontSizeSm);
SetFontColor(textLastDiv, colorFg1);

locNextDivLab = GetLocation("ROOT", "LEFT", labelLastDiv, "BOTTOM", 10, 10);
AddLabel(locNextDivLab, "labelNextDiv", "Next Dividend:", textWidth, textHeight);
SetFontSize(labelNextDiv, fontSizeSm);
SetFontColor(labelNextDiv, colorFg2);

locDiv = GetLocation(labelNextDiv, "RIGHT", labelNextDiv, "CENTER", 10);
AddLabel(locDiv, "textNextDiv", "", 380, textHeight);
SetBold(textNextDiv, fontSizeSm + 2);
SetFontColor(textNextDiv, colorFg1);

locStdLab = GetLocation("ROOT", "LEFT", labelNextDiv, "BOTTOM", 10, 10);
AddLabel(locStdLab, "labelStd", "Standard Deviation (1y):", textWidth, textHeight);
SetFontSize(labelStd, fontSizeSm);
SetFontColor(labelStd, colorFg2);

locStd = GetLocation(labelStd, "RIGHT", labelStd, "CENTER", 10);
AddLabel(locStd, "textStd", "", textWidth, textHeight);
SetBold(textStd, fontSizeSm + 2);
SetFontColor(textStd, colorFg1);

locUpdateLab = GetLocation("ROOT", "LEFT", labelStd, "BOTTOM", 10, 10);
AddLabel(locUpdateLab, "labelUpdate", "Last Update:", textWidth, textHeight);
SetFontSize(labelUpdate, fontSizeSm);
SetFontColor(labelUpdate, colorFg2);

locUpdate = GetLocation(labelUpdate, "RIGHT", labelUpdate, "CENTER", 10);
AddLabel(locUpdate, "textUpdate", "", textWidth, textHeight);
SetFontSize(textUpdate, fontSizeSm);
SetFontColor(textUpdate, colorFg1);

HideView(labelIsin);
HideView(textIsin);
HideView(labelClose);
HideView(textClose);
HideView(labelLastDiv);
HideView(textLastDiv);
HideView(labelNextDiv);
HideView(textNextDiv);
HideView(labelStd);
HideView(textStd);
HideView(labelUpdate);
HideView(textUpdate);

locStatus = GetLocation("ROOT", "LEFT", "ROOT", "CENTER", 10, 160);
AddLabel(locStatus, "labelStatus", "Status:", 180, 60);
SetBold(labelStatus, fontSizeSm + 2);
AlignText(labelStatus, "left");
SetFontColor(labelStatus, colorFg2);

locConnect = GetLocation("ROOT", "CENTER", "labelStatus", "BOTTOM", 0, 30);
AddButton(locConnect, "buttonConnect", "", 120, 120);
SetImage(buttonConnect, "connect");
AddBorder(buttonConnect, 0);

locStatus2 = GetLocation(labelStatus, "RIGHT", labelStatus, "CENTER", -20, 0);
AddLabel(locStatus2, "labelStatus2", "Disconnected", 500, 60);
SetFontColor(labelStatus2, "red");
AlignText(labelStatus2, "left");
SetBold(labelStatus2, fontSizeSm + 4);

locAboutUs = GetLocation("ROOT", "RIGHT", "ROOT", "BOTTOM", -20, -10);
AddButton(locAboutUs, "buttonAboutUs", "", 100, 100);
AddBorder(buttonAboutUs, 0);
SetImage(buttonAboutUs, "info_i");

locRateUs = GetLocation(buttonAboutUs, "LEFT", "ROOT", "BOTTOM", -10, -10);
AddButton(locRateUs, "buttonRateUs", "", 100, 100);
AddBorder(buttonRateUs, 0);
SetImage(buttonRateUs, "rate_us");

locWriteUs = GetLocation(buttonRateUs, "LEFT", "ROOT", "BOTTOM", -10, -10);
AddButton(locWriteUs, "buttonWriteUs", "", 100, 100);
AddBorder(buttonWriteUs, 0);
SetImage(buttonWriteUs, "suggest_us");

locRestore = GetLocation("ROOT", "LEFT", "ROOT", "BOTTOM", 10, -20);
AddButton(locRestore, "buttonRestore", "Restore", 200, 100);
SetImage(buttonRestore, "restore");
SetFontSize(buttonRestore, fontSize);
SetFontColor(buttonRestore, "yellow");
/*
locPurchase = GetLocation(buttonRestore, "RIGHT", buttonRestore, "CENTER", 6, 0);
AddButton(locPurchase, "buttonPurchase", "Purchase", 220, 110);
SetImage(buttonPurchase, "purchase");
SetFontSize(buttonPurchase, fontSize);*/

OnTabSelected("tabSelected");
startUp();
